/* Generated by AN DISI Unibo */ 
package it.unibo.rbrwalker

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Rbrwalker ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.initAI(  )
						itunibo.planner.plannerUtil.loadRoomMap( "roomMap"  )
						itunibo.planner.plannerUtil.showMap(  )
						println("WALKER | STARTS...")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("WALKER | waits a goal...")
					}
					 transition(edgeName="t024",targetState="gotogoal",cond=whenRequest("setgoal"))
				}	 
				state("gotogoal") { //this:State
					action { //it:State
						
									var x = ""
									var y = ""	
									var Status = ""
									var CurPos :Pair<Int,Int>? = null
						if( checkMsgContent( Term.createTerm("setgoal(X,Y)"), Term.createTerm("setgoal(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												x = payloadArg(0)
												y = payloadArg(1)
						}
						println("WALKER | received the goal $x $y...")
						 
									var Ac = "empty"
									itunibo.planner.plannerUtil.planForGoal(x,y)
									Ac = itunibo.planner.plannerUtil.getNextPlannedMove()
									while(Ac!="") {
						forward("cmd", "cmd($Ac)" ,"basicrobot" ) 
						delay(500) 
						
										itunibo.planner.plannerUtil.updateMap(Ac) 
										Ac = itunibo.planner.plannerUtil.getNextPlannedMove()
									}
									CurPos = itunibo.planner.plannerUtil.get_curPos()
									Status = "$CurPos"
									itunibo.planner.plannerUtil.showMap()
						println("WALKER | arrived to the goal ...")
						answer("setgoal", "goalstate", "goalstate($Status)"   )  
						updateResourceRep( "$Status"  
						)
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
