System standingbuffetservice 

//Observer Resources - Maitre/RBR 
Event observerfridge:observerfridge(X)
Event observerpantry:observerpantry(X)
Event observertable:observertable(X)
Event observerdishwasher:observerdishwasher(X)

//Maitre - RBR
Dispatch prepare:prepare(X, Y)
Request addFood:addFood(FOODE_CODE)	
Dispatch clear:clear(X, Y)

//rbr- rbrwalker
Request setgoal:setgoal(X,Y)
Reply goalstate:goalstate(X)

Reply warning:warning(ARG)	//void

//Maitre - Fridge/Resources
Dispatch consult:consult(ARG)	//void

//RBR - Fridge
Dispatch askFood:askFood(FOOD_CODE) 

//RBR - Resources
Dispatch changeState:changeState(X, ARG)	//X = add | remove ; ARG = state to change

//RBR - basicRobot
Dispatch cmd:cmd(MOVE)	//MOVE = h | w | s | l | r

Context ctxbasicrobot ip [host="127.0.0.1" port=8020]
//Context ctxwalker ip [host="192.168.1.211" port=8030]
Context ctxsystem ip [host="localhost" port=8040]
//Context ctxrbr ip [host="localhost" port=8050]
//Context ctxfridge ip [host="127.0.0.1" port=8060]  
//Context ctxmaitre ip [host="192.168.1.171" port=8070]

ExternalQActor basicrobot context ctxbasicrobot  

/* Actor maitre is used as a mock client */

//QActor maitre context ctxmaitre {
QActor maitre context ctxsystem {
	[#	
		var AddFoodtime = 3000L 
		var Nexp = 0
		var AnsExpose1 = ""
		var AnsExpose2 = ""
		var ClearDish = ""
		var ClearFood = ""
	#]	
	
	State s0 initial {
		println ("MAITRE | STARTS...")
		
		solve( consult("Prepare.pl") )
		
		delay 2000
	}
	Goto sendPrepare
	
	State sendPrepare {		
		solve( getAllEl(Crockery, Foods) )
		ifSolved {			
			forward rbr -m prepare : prepare($getCurSol("Crockery"), $getCurSol("Foods"))
			println ("MAITRE | send prepare command to RBR: ${getCurSol(\"Crockery\")}, ${getCurSol(\"Foods\")}")
		}
		else {
			println ("MAITRE | Error getting 'Prepare the room' elements...")
		}
		
		delay 6000		
	}
	Goto sendAddFood
	
	State sendAddFood {		
		solve( getFoodCodeEl(FoodCode) )
		ifSolved {			
			request rbr -m addFood : addFood($getCurSol("FoodCode"))
			println ("MAITRE | send addFood(${getCurSol(\"FoodCode\")}) command to RBR")				
		}
		else {
			println ("MAITRE | Error getting Food_Code for 'Add Food' task elements...")
		}
		
		delay 6000
	}
	Transition t1 
		whenTimeVar AddFoodtime -> sendConsult	//Time waiting for warning otherwise the food is present
		whenReply warning -> handleWarning
			
	State handleWarning {
		println ("MAITRE | received warning from RBR")
	}
	Goto sendConsult

	State sendConsult {	
		forward fridge -m consult : consult(0)
		println ("MAITRE | send consult command to Fridge")
		
		forward dishwasher -m consult : consult(0)
		println ("MAITRE | send consult command to Dishwasher")
		
		forward pantry -m consult : consult(0)
		println ("MAITRE | send consult command to Pantry")
		
		forward table -m consult : consult(0)
		println ("MAITRE | send consult command to Table")
	}
	Goto waitExpose

	State waitExpose {
		println ("MAITRE | waiting answers from resources...")
	}
	Transition t2
		whenEvent observerdishwasher -> handleExpose
		whenEvent observerfridge -> handleExpose
		whenEvent observerpantry -> handleExpose
		whenEvent observertable -> handleExpose

	State handleExpose {
		[#  
			var Sender = currentMsg.msgSender().removePrefix("observer")
			Nexp++ 
		#]
		
		onMsg( observerdishwasher : observerdishwasher(X) ) {
	 		[# AnsExpose1 = payloadArg(0) #]
 		}
 		onMsg( observerfridge : observerfridge(X) ) {
	 		[# AnsExpose1 = payloadArg(0) #]
 		}
 		onMsg( observerpantry : observerpantry(X) ) {
	 		[# AnsExpose1 = payloadArg(0) #]
 		}
 		onMsg( observertable : observertable(X) ) {
	 		[# 
	 			var Temp = payloadArg(0).split(";")
	 			AnsExpose1 = Temp.get(0)
	 			AnsExpose2 = Temp.get(1)
	 		#] 
 		}
 		
 		if [# Sender == "table" #] {
			println ("MAITRE | status of $Sender: $AnsExpose1 $AnsExpose2")
 		}
 		else { 
 			println ("MAITRE | status of $Sender: $AnsExpose1")
 		}
	}
	Goto preSendClear if [#	Nexp == 4 #] else waitExpose
	
	// maitre sends a consult command to table before sending clear command to rbr 
	State preSendClear {
		delay 40000
		forward table -m consult : consult(0)
		println ("MAITRE | send consult command to Table for 'Clear the room' task")
	}
	Transition t3
		whenEvent observertable -> sendClear
	
	State sendClear {
		onMsg( observertable : observertable(X) ) {	 		
	 		[# 
	 			var Temp = payloadArg(0).split(";")
	 			ClearDish = Temp.get(0)
	 			ClearFood = Temp.get(1)
	 		#]
 		}
 				
		println ("MAITRE | status of Table: Crockery = $ClearDish and Food = $ClearFood")
		
		forward rbr -m clear : clear($ClearDish, $ClearFood)
		println ("MAITRE | send clear command to RBR: Food = $ClearFood and Crockery = $ClearDish")
		
//		terminate 0
	} 
}

//QActor rbr context ctxrbr {
QActor rbr context ctxsystem {
	[# 	
		var IsMap = false
		var PrepareDish = ""
		var PrepareFood = ""
		var FoodCode = ""
		var FoodPresence = "" 
		var Food = ""
		var ClearDish = ""
		var ClearFood = ""
		var RHCoordinate : Pair<String,String> ?=null	// X = column; Y = row
		var PantryCoordinate : Pair<String,String> ?=null
		var TableCoordinate : Pair<String,String> ?=null
		var FridgeCoordinate : Pair<String,String> ?=null
		var DishwasherCoordinate : Pair<String,String> ?=null
		var CurPrepStep = 0
		var CurAddStep = 0
		var CurClearStep = 0
	#]	
	
	/* Initialization of planner and loading map if available */
	State s0 initial {		
		println ("RBR | STARTS and it's placed in RH position...")
			
		[# IsMap = true #]		
		
		solve( consult("ResourcesCoordinates.pl") )
					
		solve( getRHXYCoordinates(XRH, YRH) )
		ifSolved {	
			[# RHCoordinate = Pair("${getCurSol("XRH")}", "${getCurSol("YRH")}") #]
			println ("RBR | RH in $RHCoordinate")				
		}
		else {
			println ("RBR | Error getting RH coordinates...")
		}
	}
	Goto working if [# IsMap #] else mapping
	
	State mapping {
		println ("RBR | initializing planner...")
		println ("RBR | start mapping room...")
		delay 300 
		[# IsMap = true #]
		println ("RBR | end mapping step")
	}
	Goto working
 
	State working {
		println ("RBR | STARTS and it's ready to work")
	}
	Transition t0
		whenMsg prepare -> exPrepare
	
	State exPrepare {
		[# 
			if (CurPrepStep == 0){				
		#] 
		onMsg( prepare : prepare(X,Y) ) {
	 		[# 	
	 			PrepareDish = payloadArg(0)
				PrepareFood = payloadArg(1)
			#]
 		}
 		println ("RBR | executing task 'Prepare the room' ( Crockery = $PrepareDish; Foods = $PrepareFood ) :" )
 		
 		solve( getPantryFromCurPosXYCoordinate($RHCoordinate, XPantry, YPantry) )
		ifSolved {	
			[# PantryCoordinate = Pair("${getCurSol("XPantry")}", "${getCurSol("YPantry")}") #]
			println ("RBR | Found nearest goal for pantry in $PantryCoordinate")				
		}
		else {
			println ("RBR | Error getting pantry coordinates...")
		}
				
		println ("RBR | going to pantry...")		
		
//				request rbrwalker -m setgoal : setgoal($PantryCoordinate!!.first,${PantryCoordinate!!.second})
		[# 
				request("setgoal", "setgoal(${PantryCoordinate!!.first},${PantryCoordinate!!.second})" ,"rbrwalker" )  		
			}
			if (CurPrepStep == 1){				
		#]
		
		println ("RBR | ...reached pantry. Taking dishes...")
		forward pantry -m changeState : changeState(remove, $PrepareDish)
		delay 300
		
		solve( getTableFromCurPosXYCoordinate($PantryCoordinate, XTable, YTable) )
		ifSolved {	
			[# TableCoordinate = Pair("${getCurSol("XTable")}", "${getCurSol("YTable")}") #]
			println ("RBR | Found nearest goal for table in $TableCoordinate")				
		}
		else {
			println ("RBR | Error getting table coordinates...")
		}
		println ("RBR | going to table...")
		
		[# 
				request("setgoal", "setgoal(${TableCoordinate!!.first},${TableCoordinate!!.second})" ,"rbrwalker" )  		
			}
			if (CurPrepStep == 2){				
		#]
		
		println ("RBR | ...reached table. Adding dishes...")
		forward table -m changeState : changeState(add, $PrepareDish)
		delay 300	
		
		solve( getFridgeFromCurPosXYCoordinate($TableCoordinate, XFridge, YFridge) )
		ifSolved {	
			[# FridgeCoordinate = Pair("${getCurSol("XFridge")}", "${getCurSol("YFridge")}") #]
			println ("RBR | Found nearest goal for fridge in $FridgeCoordinate")				
		}
		else {
			println ("RBR | Error getting fridge coordinates...")
		}
		println ("RBR | going to fridge...")
		
		[# 
				request("setgoal", "setgoal(${FridgeCoordinate!!.first},${FridgeCoordinate!!.second})" ,"rbrwalker" )  		
			}
			if (CurPrepStep == 3){				
		#]
		
		println ("RBR | ...reached fridge. Taking food...")
		forward fridge -m changeState : changeState(remove, $PrepareFood)	
		delay 300
		
		solve( getTableFromCurPosXYCoordinate($FridgeCoordinate, XTable, YTable) )
		ifSolved {	
			[# TableCoordinate = Pair("${getCurSol("XTable")}", "${getCurSol("YTable")}") #]
			println ("RBR | Found nearest goal for table in $TableCoordinate")				
		}
		else {
			println ("RBR | Error getting table coordinates...")
		}
		println ("RBR | going to table...")
		
		[# 
				request("setgoal", "setgoal(${TableCoordinate!!.first},${TableCoordinate!!.second})" ,"rbrwalker" )  		
			}
			if (CurPrepStep == 4){				
		#]
		
		println ("RBR | ...reached table. Adding food...")
		forward table -m changeState : changeState(add, $PrepareFood)
		delay 300
		
		println ("RBR | coming back to RH...")
		[# 
				request("setgoal", "setgoal(${RHCoordinate!!.first},${RHCoordinate!!.second})" ,"rbrwalker" )  		
			}				
			
			CurPrepStep++
		#]
	}
	Transition t0
		whenReply goalstate -> handlePrep
		
	State handlePrep{
		onMsg(goalstate: goalstate(X)){
			println("RBR | cur position: ${payloadArg(0)}")		
		}
		[# if (CurPrepStep==5){#]
			println ("RBR | ...reached RH. Finished executing task")
		[#
			}
		#] 
	}
	Goto exPrepare if [# CurPrepStep <5 #] else wait 
		
	State wait {
		println ("RBR | is placed in RH position and it's waiting for a command...")
	}
	Transition t1
		whenRequest addFood -> checkFood
		whenMsg clear -> exClear

	State checkFood {		
		onMsg( addFood : addFood(ARG) ) {
	 		[# FoodCode = payloadArg(0).removeSurrounding("[", "]") #]
 		}

 		forward fridge -m askFood : askFood($FoodCode)
 		println ("RBR | asked fridge if it contains the food with food-code = $FoodCode")
	}
	Transition t2
		whenEvent observerfridge -> handleAnswer
			
	State handleAnswer {		
		onMsg( observerfridge : observerfridge(X) ) { 		
	 		[# 
	 			var Temp = payloadArg(0).split(";")
	 			FoodPresence = Temp.get(0)
	 		#]

	 		if [# Temp.size == 2 #] {
	 			[# Food = Temp.get(1) #]	
 			}
 		}
	} 
	Goto waitAnswer if [# FoodPresence != "true" && FoodPresence != "false" #] else checkAnswer

	/* Waiting state of the expected event --> for example to manage the case of "consult" sent by maitre before the "addFood" */
	State waitAnswer {	
	}
	Transition t3
		whenEvent observerfridge -> handleAnswer
		
	State checkAnswer {
		println ("RBR | received answer from fridge via CoAP: $FoodPresence")
	}
	Goto fail if [# FoodPresence == "false" #] else exAddFood

	State fail {
		replyTo addFood with warning : warning(w)
		println ("RBR | send warning to maitre")
	}
	Goto wait

	State exAddFood {
		[# if (CurAddStep == 0){ #]
		println ("RBR | executing task 'Add food' for food $Food with food_code $FoodCode :")
		
		solve( getFridgeFromCurPosXYCoordinate($RHCoordinate, XFridge, YFridge) )
		ifSolved {	
			[# FridgeCoordinate = Pair("${getCurSol("XFridge")}", "${getCurSol("YFridge")}") #]
			println ("RBR | Found nearest goal for fridge in $FridgeCoordinate")				
		}
		else {
			println ("RBR | Error getting fridge coordinates...")
		}
		println ("RBR | going to fridge...")

		[# 
				request("setgoal", "setgoal(${FridgeCoordinate!!.first},${FridgeCoordinate!!.second})" ,"rbrwalker" )  		
			}
			if (CurAddStep == 1){				
		#]

		println ("RBR | ...reached fridge. Taking food...")
		forward fridge -m changeState : changeState(remove, $Food)
		delay 300
		
		solve( getTableFromCurPosXYCoordinate($FridgeCoordinate, XTable, YTable) )
		ifSolved {	
			[# TableCoordinate = Pair("${getCurSol("XTable")}", "${getCurSol("YTable")}") #]
			println ("RBR | Found nearest goal for table in $TableCoordinate")				
		}
		else {
			println ("RBR | Error getting table coordinates...")
		}
		println ("RBR | going to table...")
		
		[# 
				request("setgoal", "setgoal(${TableCoordinate!!.first},${TableCoordinate!!.second})" ,"rbrwalker" )  		
			}
			if (CurAddStep == 2){				
		#]
		
		println ("RBR | ...reached table. Adding food...")
		forward table -m changeState : changeState(add, $Food)
		delay 300
		
		println ("RBR | coming back to RH...")
		[# 
				request("setgoal", "setgoal(${RHCoordinate!!.first},${RHCoordinate!!.second})" ,"rbrwalker" )  		
			}			
			CurAddStep++
		#]
	}
	Transition t2 
		whenReply goalstate-> handleAdd
	
	State handleAdd {
		onMsg(goalstate: goalstate(X)){
			println("RBR | cur position: ${payloadArg(0)}")		
		}
		[# if (CurAddStep == 3){ #]
		
		println ("RBR | ...reached RH. Finished executing task")
		[#
			}
		#]
	}	
	Goto exAddFood if [# CurAddStep < 3 #] else wait 
	
	State exClear {
		[# if(CurClearStep == 0){ #]
		onMsg( clear:clear(X,Y) ) {
	 		[# 	
	 			ClearDish = payloadArg(0)
				ClearFood = payloadArg(1)
			#]
 		}
		println ("RBR | executing task 'Clear the room':")
		
		solve( getTableFromCurPosXYCoordinate($RHCoordinate, XTable, YTable) )
		ifSolved {	
			[# TableCoordinate = Pair("${getCurSol("XTable")}", "${getCurSol("YTable")}") #]
			println ("RBR | Found nearest goal for table in $TableCoordinate")				
		}
		else {
			println ("RBR | Error getting table coordinates...")
		}
		println ("RBR | going to table...")
		[# 
				request("setgoal", "setgoal(${TableCoordinate!!.first},${TableCoordinate!!.second})" ,"rbrwalker" )  		
			}
		#]
		
		if [# ClearFood != "[]" #] {
			[# if(CurClearStep == 1){ #]
			println ("RBR | ...reached table.")	
			println ("RBR | Taking food...")
			forward table -m changeState : changeState(remove, $ClearFood)
			delay 300
			
			solve( getFridgeFromCurPosXYCoordinate($TableCoordinate, XFridge, YFridge) )
			ifSolved {	
				[# FridgeCoordinate = Pair("${getCurSol("XFridge")}", "${getCurSol("YFridge")}") #]
				println ("RBR | Found nearest goal for fridge in $FridgeCoordinate")				
			}
			else {
				println ("RBR | Error getting fridge coordinates...")
			}
			println ("RBR | going to fridge...")
			[# 	
					request("setgoal", "setgoal(${FridgeCoordinate!!.first},${FridgeCoordinate!!.second})" ,"rbrwalker" )  		
				}
				if (CurClearStep == 2){				
			#]
			println ("RBR | ...reached fridge. Adding food...")
			forward fridge -m changeState : changeState(add,$ClearFood)
			delay 300
			
			solve( getTableFromCurPosXYCoordinate($FridgeCoordinate, XTable, YTable) )
			ifSolved {	
				[# TableCoordinate = Pair("${getCurSol("XTable")}", "${getCurSol("YTable")}") #]
				println ("RBR | Found nearest goal for table in $TableCoordinate")				
			}
			else {
				println ("RBR | Error getting table coordinates...")
			}
			println ("RBR | going to table...")
			[# 
					request("setgoal", "setgoal(${TableCoordinate!!.first},${TableCoordinate!!.second})" ,"rbrwalker" )  		
				}				
			#]
		}else{
		[#
			CurClearStep ++
			CurClearStep ++
		#]
		}
		
		[# if (CurClearStep == 3){#]
		println ("RBR | ...reached table.")
						
		println ("RBR | Taking dishes...")
		forward table -m changeState : changeState(remove, $ClearDish)	
		delay 300
		
		solve( getDishwasherFromCurPosXYCoordinate($TableCoordinate, XDishwasher, YDishwasher) )
		ifSolved {	
			[# DishwasherCoordinate = Pair("${getCurSol("XDishwasher")}", "${getCurSol("YDishwasher")}") #]
			println ("RBR | Found nearest goal for dishwasher in $DishwasherCoordinate")				
		}
		else {
			println ("RBR | Error getting dishwasher coordinates...")
		}
		println ("RBR | going to dishwasher...")
		[# 
				request("setgoal", "setgoal(${DishwasherCoordinate!!.first},${DishwasherCoordinate!!.second})" ,"rbrwalker" )  		
			}
			if (CurClearStep == 4){				
		#]
		forward dishwasher -m changeState : changeState(add, $ClearDish)	
		delay 300
		
		println ("RBR | coming back to RH...")
		[# 
				request("setgoal", "setgoal(${RHCoordinate!!.first},${RHCoordinate!!.second})" ,"rbrwalker" )  		
			}
 			CurClearStep++
 		#]
	}
	Transition t3
		whenReply goalstate -> handleClear
	
	State handleClear{
		onMsg(goalstate: goalstate(X)){
			println("RBR | cur position: ${payloadArg(0)}")		
		}
		[# if (CurClearStep == 5){ #]
			println ("RBR | ...reached RH. Finished executing task")
 		[#
 			}
 		#]
	}	
	Goto exClear //if [# CurClearStep < 4 #] 
}

//QActor pantry context ctxmaitre {
QActor pantry context ctxsystem {
	[#
		val PantryObserver = util.ActorCoapObserver("localhost",8040,"ctxsystem","pantry")
//		val PantryObserver = util.ActorCoapObserver("192.168.1.171",8070,"ctxmaitre","pantry")
	#]
	
	State s0 initial {
		println ("PANTRY | STARTS and it's filled with a proper set of items...")
		
		solve( consult("PantryState.pl") )
		println ("PANTRY | loaded initial state")	
		
		[# PantryObserver.activate(myself, arrayListOf("Added", "Removed", "Fail")) #]
		println ("PANTRY | activated PantryObserver")
	}
	Goto work
	
	State work {
		println ("PANTRY| working...")
	}
	Transition t0
		whenMsg consult -> exposeState
		whenMsg changeState -> handleChangeState
			
	State exposeState {
		solve( getAllEl(Crockery) )
		ifSolved {
			println ("PANTRY | Crockery : ${getCurSol(\"Crockery\")}")
			updateResource [# "${getCurSol("Crockery")}" #]
		}
		else {
			println ("PANTRY | Error consulting pantry...")
			updateResource [# "ERROR" #]
		}
		
		println ("PANTRY| sending state informations/exposed content to maitre...")
 	}
 	Goto work
	
	State handleChangeState {
		[# var Crockery = "" #]
		
		onMsg( changeState : changeState(add, ARG) ) { 
	 		[# Crockery = payloadArg(1) #]
	 		
	 		solve( add($Crockery) )
			ifSolved {
				println ("PANTRY | added Crockery : $Crockery...")
				updateResource [# "Added Crockery $Crockery with success!" #]
			}
			else {
				println ("PANTRY | Error adding Crockery : $Crockery...")				
				updateResource [# "Fail adding Crockery $Crockery!" #]
			}
 		}
 		
 		onMsg( changeState : changeState(remove, ARG) ) { 
			[# Crockery = payloadArg(1) #]
			
			solve( remove($Crockery) )
			ifSolved {
				println ("PANTRY | removed Crockery : $Crockery...")
				updateResource [# "Removed Crockery $Crockery with success!" #]
			}
			else {
				println ("PANTRY | Error removing Crockery : $Crockery...")				
				updateResource [# "Fail removing Crockery $Crockery!" #]
			}
 		}	
 	}
 	Goto work	
}

//QActor table context ctxmaitre {
QActor table context ctxsystem {
	[#
		val TableObserver = util.ActorCoapObserver("localhost",8040,"ctxsystem","table")
//		val TableObserver = util.ActorCoapObserver("192.168.1.171",8070,"ctxmaitre","table")		
	#]
	
	State s0 initial {
		println ("TABLE | STARTS and it's empty...")
		
		solve( consult("TableState.pl") )
		println ("TABLE| loaded initial state") 
		
		[# TableObserver.activate(myself, arrayListOf("Added", "Removed", "Fail")) #]
		println ("TABLE | activated TableObserver")
	}
	Goto work
	
	State work {
		println ("TABLE| working...")
	}
	Transition t0
		whenMsg consult -> exposeState
		whenMsg changeState -> handleChangeState
		
	State exposeState {
		solve( getAllEl(Crockery, Foods) )
		ifSolved {			
			println ("TABLE | Crockery = ${getCurSol(\"Crockery\")} Foods = ${getCurSol(\"Foods\")}")
			updateResource [# "${getCurSol("Crockery")};${getCurSol("Foods")}" #]
		}
		else {
			println ("TABLE | Error Error consulting table...")
			updateResource [# "ERROR" #]
		}

		println ("TABLE| sending state informations/exposed content to maitre...")
 	}
 	Goto work
	
	State handleChangeState {
		[# var CrockeryOrFood = "" #]
		
		onMsg( changeState : changeState(add, ARG) ) { 
			[# CrockeryOrFood = payloadArg(1) #]
			
			solve( add($CrockeryOrFood) )
			ifSolved {
				println ("TABLE | added $CrockeryOrFood...")				
				updateResource [# "Added $CrockeryOrFood with success!" #]
			}
			else {
				println ("TABLE | Error adding $CrockeryOrFood...")				
				updateResource [# "Fail adding $CrockeryOrFood!" #]
			}
 		}
 		
 		onMsg( changeState : changeState(remove, ARG) ) {
			[# CrockeryOrFood = payloadArg(1) #]
			
			solve( remove($CrockeryOrFood) )
			ifSolved {
				println ("TABLE | removed $CrockeryOrFood...")	
				updateResource [# "Removed $CrockeryOrFood with success!" #]
			}
			else {
				println ("TABLE | Error removing $CrockeryOrFood...")
				updateResource [# "Fail removing $CrockeryOrFood!" #]
			}
		}
	}
	Goto work
}

//QActor dishwasher context ctxmaitre {
QActor dishwasher context ctxsystem {
	[#
		val DishwasherObserver = util.ActorCoapObserver("localhost",8040,"ctxsystem","dishwasher")
//		val DishwasherObserver = util.ActorCoapObserver("192.168.1.171",8070,"ctxmaitre","dishwasher")	
	#]
	
	State s0 initial {
		println ("DISHWASHER | STARTS and it's empty...")
		
		solve( consult("DishwasherState.pl") )
		println ("DISHWASHER | loaded initial state")
		
		[# DishwasherObserver.activate(myself, arrayListOf("Added", "Removed", "Fail")) #]
		println ("DISHWASHER | activated DishwasherObserver")
	}
	Goto work 
		
	State work {
		println ("DISHWASHER| working...")
	}
	Transition t0
		whenMsg consult -> exposeState
		whenMsg changeState -> handleChangeState	
	
	State exposeState {
		solve( getAllEl(Crockery) )
		ifSolved {
			println ("DISHWASHER | Crockery = ${getCurSol(\"Crockery\")}")
			updateResource [# "${getCurSol("Crockery")}" #]
		}
		else {
			println ("DISHWASHER | Error consulting dishwasher...")
			updateResource [# "ERROR" #]
		}
 
		println ("DISHWASHER | sending state informations/exposed content to maitre...")
 	}
 	Goto work
	
	State handleChangeState {
		[# var Crockery = "" #]

 		onMsg( changeState : changeState(add, ARG) ) { 
	 		[# Crockery = payloadArg(1) #]
	 		
	 		solve( add($Crockery) )
			ifSolved {
				println ("DISHWASHER | added Crockery : $Crockery...")
				updateResource [# "Added Crockery $Crockery with success!" #]
			}
			else {
				println ("DISHWASHER | Error adding Crockery : $Crockery...")
				updateResource [# "Fail adding Crockery $Crockery!" #]
			}
 		}
 		
 		onMsg( changeState : changeState(remove, ARG) ) { 
			[# Crockery = payloadArg(1) #]
			
			solve( remove($Crockery) )
			ifSolved {
				println ("DISHWASHER | removed Crockery : $Crockery...")
				updateResource [# "Removed Crockery $Crockery with success!" #]
			}
			else {
				println ("DISHWASHER | Error removing Crockery : $Crockery...")
				updateResource [# "Fail removing Crockery $Crockery!" #]
			}
 		}	
	}
	Goto work
}

//QActor fridge context ctxfridge {
QActor fridge context ctxsystem {
	[#
		val FridgeObserver = util.ActorCoapObserver("localhost",8040,"ctxsystem","fridge")
//		val FridgeObserver = util.ActorCoapObserver("127.0.0.1",8060,"ctxfridge","fridge")
	#]
	
	State s0 initial {
		println ("FRIDGE | STARTS and it's embedded with the proper set of food...")
		
		solve( consult("FridgeState.pl") )
		println ("FRIDGE | loaded initial state")
		
		[# FridgeObserver.activate(myself, arrayListOf("Added", "Removed", "Fail")) #]
		println ("FRIDGE | activated FridgeObserver")
		delay 300
	}
	Goto wait

	State wait {
		println ("FRIDGE | is waiting for a command...")
	} 
	Transition t1 
		whenMsg askFood -> answerFood
		whenMsg consult -> exposeState
		whenMsg changeState -> handleChangeState
	
	State answerFood {
		[# 
			var FoodCode = ""
			var FoodPresence = false
		#]
		
		onMsg( askFood : askFood(FOOD_CODE) ) {
	 		[# FoodCode = payloadArg(0) #]
 		}

		println ("FRIDGE | searching food with Food_Code = $FoodCode...")

		solve( checkFoodByCode($FoodCode, Food) )
		ifSolved {	
			[# FoodPresence = true #]
					
	 		println ("FRIDGE |  found existing food with Food_Code = $FoodCode : ${getCurSol(\"Food\")}")	
			updateResource [# "$FoodPresence;${getCurSol("Food")}" #]
		}
		else {
			println ("FRIDGE | Error searching food : not found existing or available food with Food_Code = $FoodCode...")
			updateResource [# "$FoodPresence" #]
		}	
		
		println ("FRIDGE | answered to RBR about food presence via CoAP")
	}
	Goto wait
		 
	State exposeState {
		solve( getAllEl(Foods) )
		ifSolved {
			println ("FRIDGE | Foods = ${getCurSol(\"Foods\")} ")
			updateResource [# "${getCurSol("Foods")}" #]
		}
		else {
			println ("FRIDGE | Error consulting fridge...")
			updateResource [# "ERROR" #]
		} 
		 
		println ("FRIDGE | sending state informations/exposed content to maitre...")
 	}
 	Goto wait
 	
 	State handleChangeState {
		[# var Food = "" #]

		onMsg( changeState : changeState(add, ARG) ) {
			[# Food = payloadArg(1) #]
			
			solve( add($Food) )
	 		ifSolved {
				println ("FRIDGE | added Food : $Food...")
				updateResource [# "Added Food $Food with success!" #]
			}
			else {
				println ("FRIDGE | Error adding Food : $Food...")
				updateResource [# "Fail adding Food $Food!" #]
			}
 		}
 		
 		onMsg( changeState : changeState(remove, ARG) ) {
			[# Food = payloadArg(1) #]
			
			solve( remove($Food) )
	 		ifSolved {
				println ("FRIDGE | removed Food : $Food...")
				updateResource [# "Removed Food $Food with success!" #]
			}
			else {
				println ("FRIDGE | Error removing Food : $Food...")
				updateResource [# "Fail removing Food $Food!" #]
			}
 		}
	}
	Goto wait
}
QActor rbrwalker context ctxsystem{
	
	State s0 initial {
		run itunibo.planner.plannerUtil.initAI()
		run itunibo.planner.plannerUtil.loadRoomMap("roomMap")	
		run itunibo.planner.plannerUtil.showMap()
		println ("WALKER | STARTS...")	
	}
	Goto wait
	
	State wait {
		println ("WALKER | waits a goal...")
	}
	Transition t0 
	whenRequest setgoal -> gotogoal
	
//TODO inserire uno stato di errore
//TODO goal posizione risorsa e mangia ultima soluzione
	State gotogoal {
		[#
			var x = ""
			var y = ""	
			var Status = ""
			var CurPos :Pair<Int,Int>? = null
		#]
		onMsg(setgoal:setgoal(X,Y)){
			[#
				x = payloadArg(0)
				y = payloadArg(1)
			#]
		}
		println ("WALKER | received the goal $x $y...")
		[# 
			var Ac = "empty"
			itunibo.planner.plannerUtil.planForGoal(x,y)
			Ac = itunibo.planner.plannerUtil.getNextPlannedMove()
			while(Ac!="") {
		#]
		forward basicrobot -m cmd : cmd($Ac)
		delay 500
		[#
				itunibo.planner.plannerUtil.updateMap(Ac) 
				Ac = itunibo.planner.plannerUtil.getNextPlannedMove()
			}
			CurPos = itunibo.planner.plannerUtil.get_curPos()
			Status = "$CurPos"
			itunibo.planner.plannerUtil.showMap()
		#]
		println ("WALKER | arrived to the goal ...")
		replyTo setgoal with goalstate : goalstate($Status)
		updateResource[# "$Status" #]
	}
	Goto wait
}