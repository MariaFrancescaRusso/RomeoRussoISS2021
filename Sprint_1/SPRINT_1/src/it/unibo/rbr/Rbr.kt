/* Generated by AN DISI Unibo */ 
package it.unibo.rbr

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Rbr ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 	
				var IsMap = false
				var Dishes = ""
				var Food = ""
				var FoodCode = ""
				var FoodPresence = "" 
				var RHCoordinate : Pair<String,String> ?= null	// X = column; Y = row
				var CurrentPos = ""
				var Cleared = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("RBR | STARTS and it's placed in RH position...")
						 IsMap = true  
						solve("consult('ResourcesCoordinates.pl')","") //set resVar	
						solve("getRHXYCoordinates(XRH,YRH)","") //set resVar	
						if( currentSolution.isSuccess() ) { RHCoordinate = Pair("${getCurSol("XRH")}", "${getCurSol("YRH")}")  
						println("RBR | RH in $RHCoordinate")
						}
						else
						{println("RBR | Error getting RH coordinates...")
						}
					}
					 transition( edgeName="goto",targetState="working", cond=doswitchGuarded({ IsMap  
					}) )
					transition( edgeName="goto",targetState="mapping", cond=doswitchGuarded({! ( IsMap  
					) }) )
				}	 
				state("mapping") { //this:State
					action { //it:State
						println("RBR | initializing planner...")
						println("RBR | start mapping room...")
						delay(300) 
						 IsMap = true  
						println("RBR | end mapping step")
					}
					 transition( edgeName="goto",targetState="working", cond=doswitch() )
				}	 
				state("working") { //this:State
					action { //it:State
						println("RBR | ready to work...")
					}
					 transition(edgeName="t00",targetState="exPrepareHP",cond=whenDispatch("prepare"))
				}	 
				state("exPrepareHP") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("prepare(X,Y)"), Term.createTerm("prepare(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 	
									 			Dishes = payloadArg(0)
												Food = payloadArg(1)
						}
						println("RBR | executing task 'Prepare the room' ( Crockery = $Dishes; Foods = $Food ) :")
						solve("getPantryFromCurPosXYCoordinate($RHCoordinate,XPantry,YPantry)","") //set resVar	
						if( currentSolution.isSuccess() ) {println("RBR | Found nearest goal for pantry in (${getCurSol("XPantry")}, ${getCurSol("YPantry")})")
						}
						else
						{println("RBR | Error getting pantry coordinates...")
						}
						println("RBR | going to pantry...")
						request("setGoal", "setGoal(${getCurSol("XPantry")},${getCurSol("YPantry")})" ,"rbrwalker" )  
					}
					 transition(edgeName="t11",targetState="exPreparePT",cond=whenReply("goalState"))
				}	 
				state("exPreparePT") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("goalState(X)"), Term.createTerm("goalState(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurrentPos = payloadArg(0).removePrefix(",")  
								println("RBR | current position: $CurrentPos")
								updateResourceRep( "$CurrentPos"  
								)
						}
						println("RBR | ...reached pantry. Taking dishes...")
						forward("changeState", "changeState(remove,$Dishes)" ,"pantry" ) 
						delay(300) 
						solve("getTableFromCurPosXYCoordinate($CurrentPos,XTable,YTable)","") //set resVar	
						if( currentSolution.isSuccess() ) {println("RBR | Found nearest goal for table in (${getCurSol("XTable")}, ${getCurSol("YTable")})")
						}
						else
						{println("RBR | Error getting table coordinates...")
						}
						println("RBR | going to table...")
						request("setGoal", "setGoal(${getCurSol("XTable")},${getCurSol("YTable")})" ,"rbrwalker" )  
					}
					 transition(edgeName="t22",targetState="exPrepareTF",cond=whenReply("goalState"))
				}	 
				state("exPrepareTF") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("goalState(X)"), Term.createTerm("goalState(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurrentPos = payloadArg(0).removePrefix(",")  
								println("RBR | current position: $CurrentPos")
								updateResourceRep( "$CurrentPos"  
								)
						}
						println("RBR | ...reached table. Adding dishes...")
						forward("changeState", "changeState(add,$Dishes)" ,"table" ) 
						delay(300) 
						solve("getFridgeFromCurPosXYCoordinate($CurrentPos,XFridge,YFridge)","") //set resVar	
						if( currentSolution.isSuccess() ) {println("RBR | Found nearest goal for fridge in (${getCurSol("XFridge")}, ${getCurSol("YFridge")})")
						}
						else
						{println("RBR | Error getting fridge coordinates...")
						}
						println("RBR | going to fridge...")
						request("setGoal", "setGoal(${getCurSol("XFridge")},${getCurSol("YFridge")})" ,"rbrwalker" )  
					}
					 transition(edgeName="t33",targetState="exPrepareFT",cond=whenReply("goalState"))
				}	 
				state("exPrepareFT") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("goalState(X)"), Term.createTerm("goalState(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurrentPos = payloadArg(0).removePrefix(",")  
								println("RBR | current position: $CurrentPos")
								updateResourceRep( "$CurrentPos"  
								)
						}
						println("RBR | ...reached fridge. Taking food...")
						forward("changeState", "changeState(remove,$Food)" ,"fridge" ) 
						delay(300) 
						solve("getTableFromCurPosXYCoordinate($CurrentPos,XTable,YTable)","") //set resVar	
						if( currentSolution.isSuccess() ) {println("RBR | Found nearest goal for table in (${getCurSol("XTable")}, ${getCurSol("YTable")})")
						}
						else
						{println("RBR | Error getting table coordinates...")
						}
						println("RBR | going to table...")
						request("setGoal", "setGoal(${getCurSol("XTable")},${getCurSol("YTable")})" ,"rbrwalker" )  
					}
					 transition(edgeName="t44",targetState="addFoodTable",cond=whenReply("goalState"))
				}	 
				state("addFoodTable") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("goalState(X)"), Term.createTerm("goalState(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurrentPos = payloadArg(0).removePrefix(",")  
								println("RBR | current position: $CurrentPos")
								updateResourceRep( "$CurrentPos"  
								)
						}
						println("RBR | ...reached table. Adding food...")
						forward("changeState", "changeState(add,$Food)" ,"table" ) 
						delay(300) 
					}
					 transition( edgeName="goto",targetState="goToHome", cond=doswitch() )
				}	 
				state("goToHome") { //this:State
					action { //it:State
						println("RBR | coming back to RH...")
						 request("setGoal", "setGoal(${RHCoordinate!!.first}, ${RHCoordinate!!.second})", "rbrwalker")  
					}
					 transition(edgeName="t55",targetState="wait",cond=whenReplyGuarded("goalState",{ !Cleared  
					}))
					transition(edgeName="t56",targetState="terminateRbr",cond=whenReplyGuarded("goalState",{ Cleared  
					}))
				}	 
				state("wait") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("goalState(X)"), Term.createTerm("goalState(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurrentPos = payloadArg(0).removePrefix(",")  
								println("RBR | current position: $CurrentPos")
								updateResourceRep( "$CurrentPos"  
								)
						}
						println("RBR | ...reached RH. Finished executing task")
						println("RBR | waiting for a command...")
					}
					 transition(edgeName="t67",targetState="checkFood",cond=whenRequest("addFood"))
					transition(edgeName="t68",targetState="exClearHT",cond=whenDispatch("clear"))
				}	 
				state("checkFood") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("addFood(FOODE_CODE)"), Term.createTerm("addFood(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 FoodCode = payloadArg(0).removeSurrounding("[", "]")  
						}
						forward("askFood", "askFood($FoodCode)" ,"fridge" ) 
						println("RBR | asked fridge if it contains the food with food-code = $FoodCode")
					}
					 transition(edgeName="t79",targetState="handleAnswer",cond=whenEvent("observerfridge"))
				}	 
				state("handleAnswer") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("observerfridge(X)"), Term.createTerm("observerfridge(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
									 			var Temp = payloadArg(0).split(";")
									 			FoodPresence = Temp.get(0)
								if(  Temp.size == 2  
								 ){ Food = Temp.get(1)  
								}
						}
					}
					 transition( edgeName="goto",targetState="waitAnswer", cond=doswitchGuarded({ FoodPresence != "true" && FoodPresence != "false"  
					}) )
					transition( edgeName="goto",targetState="checkAnswer", cond=doswitchGuarded({! ( FoodPresence != "true" && FoodPresence != "false"  
					) }) )
				}	 
				state("waitAnswer") { //this:State
					action { //it:State
					}
					 transition(edgeName="t810",targetState="handleAnswer",cond=whenEvent("observerfridge"))
				}	 
				state("checkAnswer") { //this:State
					action { //it:State
						println("RBR | received answer from fridge via CoAP: $FoodPresence")
					}
					 transition( edgeName="goto",targetState="fail", cond=doswitchGuarded({ FoodPresence == "false"  
					}) )
					transition( edgeName="goto",targetState="exAddFoodHF", cond=doswitchGuarded({! ( FoodPresence == "false"  
					) }) )
				}	 
				state("fail") { //this:State
					action { //it:State
						answer("addFood", "warning", "warning(w)"   )  
						println("RBR | send warning to maitre")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("exAddFoodHF") { //this:State
					action { //it:State
						println("RBR | executing task 'Add food' for food $Food with food_code $FoodCode :")
						solve("getFridgeFromCurPosXYCoordinate($RHCoordinate,XFridge,YFridge)","") //set resVar	
						if( currentSolution.isSuccess() ) {println("RBR | Found nearest goal for fridge in (${getCurSol("XFridge")}, ${getCurSol("YFridge")})")
						}
						else
						{println("RBR | Error getting fridge coordinates...")
						}
						println("RBR | going to fridge...")
						request("setGoal", "setGoal(${getCurSol("XFridge")},${getCurSol("YFridge")})" ,"rbrwalker" )  
					}
					 transition(edgeName="t911",targetState="exAddFoodFT",cond=whenReply("goalState"))
				}	 
				state("exAddFoodFT") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("goalState(X)"), Term.createTerm("goalState(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurrentPos = payloadArg(0).removePrefix(",")  
								println("RBR | current position: $CurrentPos")
								updateResourceRep( "$CurrentPos"  
								)
						}
						println("RBR | ...reached fridge. Taking food...")
						forward("changeState", "changeState(remove,$Food)" ,"fridge" ) 
						delay(300) 
						solve("getTableFromCurPosXYCoordinate($CurrentPos,XTable,YTable)","") //set resVar	
						if( currentSolution.isSuccess() ) {println("RBR | Found nearest goal for table in (${getCurSol("XTable")}, ${getCurSol("YTable")})")
						}
						else
						{println("RBR | Error getting table coordinates...")
						}
						println("RBR | going to table...")
						request("setGoal", "setGoal(${getCurSol("XTable")},${getCurSol("YTable")})" ,"rbrwalker" )  
					}
					 transition(edgeName="t1012",targetState="addFoodTable",cond=whenReply("goalState"))
				}	 
				state("exClearHT") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("clear(X,Y)"), Term.createTerm("clear(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 	
									 			Dishes = payloadArg(0)
												Food = payloadArg(1)
						}
						println("RBR | executing task 'Clear the room':")
						solve("getTableFromCurPosXYCoordinate($RHCoordinate,XTable,YTable)","") //set resVar	
						if( currentSolution.isSuccess() ) {println("RBR | Found nearest goal for table in (${getCurSol("XTable")}, ${getCurSol("YTable")})")
						}
						else
						{println("RBR | Error getting table coordinates...")
						}
						println("RBR | going to table...")
						request("setGoal", "setGoal(${getCurSol("XTable")},${getCurSol("YTable")})" ,"rbrwalker" )  
					}
					 transition(edgeName="t1113",targetState="exClearTF",cond=whenReplyGuarded("goalState",{ Food != "[]"  
					}))
					transition(edgeName="t1114",targetState="exClearTD",cond=whenReplyGuarded("goalState",{ Food == "[]"  
					}))
				}	 
				state("exClearTF") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("goalState(X)"), Term.createTerm("goalState(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurrentPos = payloadArg(0).removePrefix(",")  
								println("RBR | current position: $CurrentPos")
								updateResourceRep( "$CurrentPos"  
								)
						}
						println("RBR | ...reached table. Taking food...")
						forward("changeState", "changeState(remove,$Food)" ,"table" ) 
						delay(300) 
						solve("getFridgeFromCurPosXYCoordinate($CurrentPos,XFridge,YFridge)","") //set resVar	
						if( currentSolution.isSuccess() ) {println("RBR | Found nearest goal for fridge in (${getCurSol("XFridge")}, ${getCurSol("YFridge")})")
						}
						else
						{println("RBR | Error getting fridge coordinates...")
						}
						println("RBR | going to fridge...")
						request("setGoal", "setGoal(${getCurSol("XFridge")},${getCurSol("YFridge")})" ,"rbrwalker" )  
					}
					 transition(edgeName="t1215",targetState="exClearFT",cond=whenReply("goalState"))
				}	 
				state("exClearFT") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("goalState(X)"), Term.createTerm("goalState(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurrentPos = payloadArg(0).removePrefix(",")  
								println("RBR | current position: $CurrentPos")
								updateResourceRep( "$CurrentPos"  
								)
						}
						println("RBR | ...reached fridge. Adding food...")
						forward("changeState", "changeState(add,$Food)" ,"fridge" ) 
						delay(300) 
						solve("getTableFromCurPosXYCoordinate($CurrentPos,XTable,YTable)","") //set resVar	
						if( currentSolution.isSuccess() ) {println("RBR | Found nearest goal for table in (${getCurSol("XTable")}, ${getCurSol("YTable")})")
						}
						else
						{println("RBR | Error getting table coordinates...")
						}
						println("RBR | going to table...")
						request("setGoal", "setGoal(${getCurSol("XTable")},${getCurSol("YTable")})" ,"rbrwalker" )  
					}
					 transition(edgeName="t1316",targetState="exClearTD",cond=whenReply("goalState"))
				}	 
				state("exClearTD") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("goalState(X)"), Term.createTerm("goalState(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurrentPos = payloadArg(0).removePrefix(",")  
								println("RBR | current position: $CurrentPos")
								updateResourceRep( "$CurrentPos"  
								)
						}
						println("RBR | ...reached table. Taking dishes...")
						forward("changeState", "changeState(remove,$Dishes)" ,"table" ) 
						delay(300) 
						solve("getDishwasherFromCurPosXYCoordinate($CurrentPos,XDishwasher,YDishwasher)","") //set resVar	
						if( currentSolution.isSuccess() ) {println("RBR | Found nearest goal for dishwasher in (${getCurSol("XDishwasher")}, ${getCurSol("YDishwasher")})")
						}
						else
						{println("RBR | Error getting dishwasher coordinates...")
						}
						println("RBR | going to dishwasher...")
						request("setGoal", "setGoal(${getCurSol("XDishwasher")},${getCurSol("YDishwasher")})" ,"rbrwalker" )  
					}
					 transition(edgeName="t1417",targetState="exClearD",cond=whenReply("goalState"))
				}	 
				state("exClearD") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("goalState(X)"), Term.createTerm("goalState(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurrentPos = payloadArg(0).removePrefix(",")  
								println("RBR | current position: $CurrentPos")
								updateResourceRep( "$CurrentPos"  
								)
						}
						println("RBR | ...reached dishwasher. Adding dishes...")
						forward("changeState", "changeState(add,$Dishes)" ,"dishwasher" ) 
						delay(300) 
						 Cleared = true  
					}
					 transition( edgeName="goto",targetState="goToHome", cond=doswitch() )
				}	 
				state("terminateRbr") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("goalState(X)"), Term.createTerm("goalState(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurrentPos = payloadArg(0).removePrefix(",")  
								println("RBR | current position: $CurrentPos")
								updateResourceRep( "$CurrentPos"  
								)
						}
						println("RBR | ...reached RH. Finished executing task")
						println("RBR | terminate Basic Robot...")
						forward("end", "end(0)" ,"basicrobot" ) 
						println("RBR | terminate RBR Walker...")
						forward("end", "end(0)" ,"rbrwalker" ) 
						println("RBR | terminate...")
						terminate(1)
					}
				}	 
			}
		}
}
