/* Generated by AN DISI Unibo */ 
package it.unibo.table

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Table ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				val TableObserver = util.ActorCoapObserver("localhost",8040,"ctxsystem","table")
		//		val TableObserver = util.ActorCoapObserver("192.168.1.171",8070,"ctxmaitre","table")		
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("TABLE | STARTS and it's empty...")
						solve("consult('TableState.pl')","") //set resVar	
						println("TABLE| loaded initial state")
						 TableObserver.activate(myself, arrayListOf("Added", "Removed", "Fail"))  
						println("TABLE | activated TableObserver")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("TABLE| working...")
					}
					 transition(edgeName="t031",targetState="exposeState",cond=whenDispatch("consult"))
					transition(edgeName="t032",targetState="handleChangeState",cond=whenDispatch("changeState"))
				}	 
				state("exposeState") { //this:State
					action { //it:State
						solve("getAllEl(Crockery,Foods)","") //set resVar	
						if( currentSolution.isSuccess() ) {println("TABLE | Crockery = ${getCurSol("Crockery")} Foods = ${getCurSol("Foods")}")
						updateResourceRep( "${getCurSol("Crockery")};${getCurSol("Foods")}"  
						)
						}
						else
						{println("TABLE | Error Error consulting table...")
						updateResourceRep( "ERROR"  
						)
						}
						println("TABLE| sending state informations/exposed content to maitre...")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleChangeState") { //this:State
					action { //it:State
						 var CrockeryOrFood = ""  
						if( checkMsgContent( Term.createTerm("changeState(X,ARG)"), Term.createTerm("changeState(add,ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CrockeryOrFood = payloadArg(1)  
								solve("add($CrockeryOrFood)","") //set resVar	
								if( currentSolution.isSuccess() ) {println("TABLE | added $CrockeryOrFood...")
								updateResourceRep( "Added $CrockeryOrFood with success!"  
								)
								}
								else
								{println("TABLE | Error adding $CrockeryOrFood...")
								updateResourceRep( "Fail adding $CrockeryOrFood!"  
								)
								}
						}
						if( checkMsgContent( Term.createTerm("changeState(X,ARG)"), Term.createTerm("changeState(remove,ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CrockeryOrFood = payloadArg(1)  
								solve("remove($CrockeryOrFood)","") //set resVar	
								if( currentSolution.isSuccess() ) {println("TABLE | removed $CrockeryOrFood...")
								updateResourceRep( "Removed $CrockeryOrFood with success!"  
								)
								}
								else
								{println("TABLE | Error removing $CrockeryOrFood...")
								updateResourceRep( "Fail removing $CrockeryOrFood!"  
								)
								}
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
