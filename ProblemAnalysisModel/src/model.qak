System standingbuffetservice

//Maitre-RBR
Dispatch prepare:prepare(ARG)//void
Dispatch addFood:addFood(FOODE_CODE) //FOODE_CODE = int
Dispatch clear:clear(ARG)//void

Dispatch stop:stop(ARG)//void
Dispatch reactivate:reactivate(ARG)//void

Dispatch warning:warning(ARG)//void

//Maitre-Fridge
Request consult:consult(ARG)
Reply expose:expose(ARG) 	//ARG = {Lisit(food; food-code )}

//RBR-Fridge
Request askFood:askFood(FOODE_CODE)//FOODE_CODE = int 
Reply answer:answer(ARG)	// ARG= true/false

//Context ctxSystem ip [host="localhost" port=8040]
 
Context ctxRBR ip [host="localhost" port=8050]
Context ctxFridge ip [host="127.0.0.1" port=8060]  
Context ctxMaitre ip [host="192.168.43.157" port=8070]

QActor rbr context ctxRBR{
	[# 	var FOOD_PRESENCE = false 
		var FOOD_CODE = "null"
	#]	

	State s0 initial {
		println ("RBR | STARTS and it's placed in RH position")
	}
	Transition t0
		whenMsg prepare -> exPrepare
		  
	State exPrepare {
		println ("RBR | executing task 'Prepare the room':")
		println ("RBR | going to pantry...")
		println ("RBR | ...reached pantry. Going to table...")
		println ("RBR | ...reached table. Going to fridge...")
		println ("RBR | ...reached fridge. Going to table...")
		println ("RBR | ...reached table. Coming back to RH...")
		println ("RBR | ...reached RH. Finished executing task")
	}
	Goto wait
	
	State wait {
		println ("RBR | is placed in RH position and it's waiting for a command...")
	}
	Transition t1
		whenMsg addFood -> checkFood
		whenMsg clear -> exClear

	
	State checkFood {
		onMsg( addFood:addFood(ARG) ) {
	 		[# FOOD_CODE = payloadArg(0) #]
	 		println ("RBR | asking fridge food-code = $FOOD_CODE ")
 		}

 		request fridge -m askFood : askFood($FOOD_CODE)
 		println ("RBR | asked fridge if it contains the food required")
	}
	Transition t2
		whenReply answer -> handleReply
		
	State handleReply {
	[# FOOD_PRESENCE = payloadArg(0).toBoolean() #]	
	}
	Goto fail if [# FOOD_PRESENCE == false #] else exAddFood

	State fail {
		forward maitre -m warning:warning(w)
		println ("RBR | send warning to maitre")
	}
	Goto wait

	State exAddFood {
		println ("RBR | executing task 'Add food':")
		println ("RBR | going to fridge...")
		println ("RBR | ...reached fridge. Going to table...")
		println ("RR | ...reached table. Coming back to RH...")
		println ("RBR | ...reached RH. Finished executing task")
	}
	Goto wait
	
	State exClear {
		println ("RBR | executing task 'Clear the room':")
		println ("RBR | going to table...")
		println ("RBR | ...reached table. Going to fridge...")
		println ("RBR | ...reached fridge. Going to table...")
		println ("RBR | ...reached table. Going to dishwasher...")
		println ("RBR | ...reached dishwasher. Coming back to RH...")
		println ("RBR | ...reached RH. Finished executing task")
		terminate 0
	}
}

QActor fridge context ctxFridge{
	//TODO frigo comunica in COAPs
	//TODO sistemare messaggi 
	//TODO inserire una struttura dati che rappresenti gli oggetti contenuti; anche vuota ?
	[#	var FOOD_PRESENCE = false
		var STATUS = "Vuoto"
	#]
	
	State s0 initial {
		println ("FRIDGE | STARTS and it's embedded with the proper set of food")
	}
	Goto wait
	
	State wait {
		println ("FRIDGE | is waiting for a command...")
	} 
	Transition t1 
		whenRequest askFood -> answerFood
		whenRequest consult -> exposeState

	State answerFood {
		[# var FOOD_CODE = " " #]
		onMsg( askFood:askFood(ARG) ) {
	 		[# FOOD_CODE = payloadArg(0) #]
 		}
		println ("FRIDGE | searching food_code $FOOD_CODE...")		
		//TODO simulare il controllo che contenga food ?
		replyTo askFood with answer:answer($FOOD_PRESENCE)
		println ("FRIDGE | answered to RBR about food")
	}
	Goto wait
	
	State exposeState {
		replyTo consult with expose:expose($STATUS)
		println ("FRIDGE | exposed content to maitre")
	} 
	Goto wait		
}

QActor maitre context ctxMaitre{

	State s0 initial {
		delay 2000
		println ("MAITRE | STARTS")
		
		forward rbr -m prepare : prepare(0)
		println ("MAITRE | send prepare command to RBR")
		
		forward rbr -m addFood : addFood(1500)
		println ("MAITRE | send addFood(food_code) command to RBR")	
	}
	Transition t1 
		whenTime 3000 -> s3
		whenMsg warning -> s2
		//TODO: È opportuno parlare del timer nell'introduzione; è opportuno scriverlo meglio nel codice Es varibile = duration AddFood (è possibile farlo?)? 
			
	State s2 {
		println ("MAITRE | received warning from RBR")
	}
	Goto s3
	 
	State s3 {
		println ("MAITRE | send consult command to Fridge")	
		request fridge -m consult : consult(0) 
	}
	Transition t2
		whenReply expose -> s4	
	
	State s4 {
		[# var ansExpose = " " #]
		onMsg( expose:expose(ARG) ) {
	 		[# ansExpose= payloadArg(0) #]
 		}
		println ("MAITRE | received expose from fridge: $ansExpose")

		forward rbr -m clear : clear(0)
	}
}