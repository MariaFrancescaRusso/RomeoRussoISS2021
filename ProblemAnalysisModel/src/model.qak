System standingbuffetservice
//TODO 1. Convertire stato in COAP
//TODO 2. Caricare lo stato (PROLOG) 
//TODO 3. Gestire Comunicazione expose con COAP

//Maitre-RBR
Dispatch prepare:prepare(X,Y)//void
Dispatch addFood:addFood(FOODE_CODE) //FOODE_CODE = int
Dispatch clear:clear(ARG)//void

Dispatch stop:stop(ARG)//void
Dispatch reactivate:reactivate(ARG)//void

Dispatch warning:warning(ARG)//void

//By requirements the fridge must answer via COAP, so it's necessary to use a dispatch
//Maitre-Fridge
Dispatch consult:consult(ARG)//void
Dispatch expose:expose(ARG)//For now it's just a string
//RBR-Fridge
Dispatch askFood:askFood(FOODE_CODE)//FOODE_CODE = int 
Dispatch answer:answer(ARG)	// ARG= true/false

//RBR-Res
Dispatch changeState:changeState(X)

Context ctxSystem ip [host="localhost" port=8040]
//Context ctxRBR ip [host="localhost" port=8050]
//Context ctxFridge ip [host="127.0.0.1" port=8060]  
//Context ctxMaitre ip [host="192.168.1.211" port=8070]

QActor rbr context ctxSystem{
	[# 	var FoodPresence = false 
		var PrepareDish = 0
		var PrepareFood = emptyArray<Int>()
		var ClearDish = 0
		var ClearFood = emptyArray<Int>()
		var IsMap = false
	#]	
	
//TODO nell'analisi dei requisiti qua attendiamo direttametne prepare è opportuno inserire lo stato e planning work già prima ?
	State s0 initial {
		println ("RBR | STARTS and it's placed in RH position")
		[#IsMap = true #]
	}
	Goto working if [# IsMap #] else mapping
	
	State mapping {
		println ("RBR | initializing planner")
		println ("RBR | start mapping room ")
		delay 300 
		println ("RBR | end mapping step")
		[# IsMap = true#]
	
	}Goto working
 
	State working {
		println ("RBR | STARTS and it's ready to work")
	}
	Transition t0
		whenMsg prepare -> exPrepare
	
	State exPrepare {
		//FIXME gestire l'insieme di foodcode
		onMsg( prepare:prepare(X,Y) ) {
	 		[# 	PrepareDish = payloadArg(0).toInt()
				PrepareFood = payloadArg(1).map{ it.toInt() }.toTypedArray()
			#]
 		}
 		
		println ("RBR | executing task 'Prepare the room'; DISHES= $PrepareDish; Foods= $PrepareFood:" )
		println ("RBR | going to pantry...")
		
		forward pantry -m changeState : remove($PrepareDish)
		
		println ("RBR | ...reached pantry. Going to table...")
		forward table -m changeState : addDishes($PrepareDish)
		
		println ("RBR | ...reached table. Going to fridge...")
		forward fridge -m changeState : remove($PrepareFood)
		
		println ("RBR | ...reached fridge. Going to table...")
		forward table -m changeState : addFood($PrepareFood)
		
		println ("RBR | ...reached table. Coming back to RH...")
		println ("RBR | ...reached RH. Finished executing task") 
	}
	Goto wait
	
	State wait {
		println ("RBR | is placed in RH position and it's waiting for a command...")
	}
	Transition t1
		whenMsg addFood -> checkFood
		whenMsg clear -> exClear

	State checkFood {
		[# var Food_Code = -1 #]
		onMsg( addFood:addFood(ARG) ) {
	 		[# Food_Code = payloadArg(0).toInt() #]
 		}

 		forward fridge -m askFood : askFood($Food_Code)
 		println ("RBR | asked fridge if it contains the food with food-code = $Food_Code")
	}
	Transition t2
		whenMsg answer -> handleReply
			
	State handleReply {
		onMsg( answer:answer(X) ) {
	 		[# FoodPresence = payloadArg(0).toBoolean() #]
 		}
		println ("RBR | received answer from fridge: $FoodPresence")
	}
	Goto fail if [# FoodPresence == false #] else exAddFood

	State fail {
		forward maitre -m warning:warning(w)
		println ("RBR | send warning to maitre")
	}
	Goto wait

	State exAddFood {
		println ("RBR | executing task 'Add food'")
		println ("RBR | going to fridge...")
		println ("RBR | ...reached fridge. Going to table...")
		println ("RBR | ...reached table. Coming back to RH...")
		println ("RBR | ...reached RH. Finished executing task")
	}
	Goto wait
	
	State exClear {
//TODO clear deve prima mandare un consult al tavolo per conoscerne lo stato ?
		[# 	ClearDish = PrepareDish 
			ClearFood = PrepareFood
		#]
		println ("RBR | executing task 'Clear the room':")
		println ("RBR | going to table...")
		forward table -m changeState:removeFood($ClearFood)
		
		println ("RBR | ...reached table. Going to fridge...")
		forward fridge -m changeState:add($ClearFood)
		
		println ("RBR | ...reached fridge. Going to table...")
		forward table -m changeState:removeDishes($ClearDish)
		
		println ("RBR | ...reached table. Going to dishwasher...")
		forward dishwasher -m changeState:add($ClearDish)
		println ("RBR | ...reached dishwasher. Coming back to RH...")
		println ("RBR | ...reached RH. Finished executing task")
		terminate 0
	}
}

QActor maitre context ctxSystem{
	[#	var AddFoodtime = 3000L 
		var Nexp = 0
		var PrepareDish = 0
		var PrepareFood = emptyArray<Int>()
		var FoodCode = 0
	#]	
	
	State s0 initial {
		[# 	PrepareDish = 20
			PrepareFood = arrayOf(1,2,3)
			FoodCode = 1
		#]
		delay 2000
		println ("MAITRE | STARTS")
	}Goto sendPrepare
	
	State sendPrepare {
//FIXME impostare piatti e cibo
		forward rbr -m prepare:prepare($PrepareDish, arrayOf(3,2,1))///PrepareDish;PrepareFood
		println ("MAITRE | send prepare command to RBR: $PrepareDish, $PrepareFood")		
	}
	Goto sendAddFood
	
	State sendAddFood {
		forward rbr -m addFood : addFood($FoodCode)
		println ("MAITRE | send addFood(Food_Code) command to RBR")	
	}
	Transition t1 
		whenTimeVar AddFoodtime -> sendConsult //time waiting for warning otherwise the food is present
		whenMsg warning -> handleWarning
			
	State handleWarning {
		println ("MAITRE | received warning from RBR")
	}
	Goto sendConsult

	State sendConsult{	
		forward fridge -m consult : consult(0)
		println ("MAITRE | send consult command to Fridge")
		forward dishwasher -m consult : consult(0)
		println ("MAITRE | send consult command to Dishwasher")
		forward pantry -m consult : consult(0)
		println ("MAITRE | send consult command to Pantry")
		forward table -m consult : consult(0)
		println ("MAITRE | send consult command to Table")
	}
	Goto waitConsult

	State waitConsult{
		println("waiting answer from resource")
	}Transition t0 
	whenMsg expose -> handleExpose
//FIXME gestire i messaggi a seconda del mittente
	State handleExpose {
		[#  var Sender = currentMsg.msgSender()
			var AnsExpose = " "
			Nexp++ 
		#]
		onMsg( expose:expose(X) ) {
	 		[# AnsExpose= payloadArg(0) #]
 		}
		println ("MAITRE | status of $Sender: $AnsExpose")
	}Goto sendClear if [# Nexp == 4 #]
	else waitConsult
	
	State sendClear{
		forward rbr -m clear : clear(0)
		terminate 0
	}
}
//FIXME l'invio dell'expose deve tenere conto di chi invia (on msg expose:mittente)
QActor pantry context ctxSystem{

	State s0 initial {
		println ("PANTRY| loading initial state ")
		solve(consult("PantryInit.pl"))	
	}Goto work
	
	State work{
		println ("PANTRY| working")
	}
	Transition t0
	whenMsg consult -> exposeState
	whenMsg changeState-> handleChangeState
	
	State exposeState{
		println ("PANTRY| sending state informations")
		forward maitre -m expose:expose($Dishes)
	}Goto work
	
	State handleChangeState{
		[# var Nd = 0 #]
		onMsg( changeState:add(X) ) { 
	 		println ("PANTRY | add $Nd...")
	 		updateResource()
	 		[# //Dishes = Dishes + Nd  #]
 		}
 		onMsg( changeState:remove(X) ) { 
			[# 	Nd = payloadArg(0).toInt() #]
	 		println ("PANTRY| remove $Nd...")
	 		updateResource()
	 		[# //Dishes = Dishes - Nd  #]
 		}	
 	}Goto work	
}

QActor table context ctxSystem{
	// da decidere come rappresentare il cibo
	State s0 initial {
		println ("TABLE| loading initial state ") 
		solve(consult("TableInit.pl"))
	}Goto work
	
	State work{
		println ("TABLE| working")
	}
	Transition t0
	whenMsg consult -> exposeState
	whenMsg changeState -> handleChangeState
	
	State exposeState{
		println ("TABLE| sending state informations")
		forward maitre -m expose:expose($Dishes,$Foods)
	}Goto work
	
	State handleChangeState{
		[#
			var Nd= 0
			var Fs =  emptyArray<Int>()
		#]
 		//FIXME gestire food
		onMsg( changeState:addFood(X) ) { //X valore
			[# Fs= payloadArg(0).map{ it.toInt() }.toTypedArray() #]
	 		println ("TABLE| add $Fs...")
	 		updateResource()
 		}
 		//FIXME gestire food
 		onMsg( changeState:removeFood(X) ) { //X valore
			[# 	Fs = payloadArg(0).map{ it.toInt() }.toTypedArray() #]
	 		println ("TABLE| remove $Fs...")
	 		updateResource()
		}
		onMsg( changeState:addDishes(X) ) { //X valore
			[# Nd= payloadArg(0).toInt() #]
	 		println ("TABLE| add $Nd...")
	 		[# //Dishes = Dishes + Nd  #]
	 		updateResource()
 		}
 		onMsg( changeState:removeDishes(X) ) { //X valore
			[# 	Nd = payloadArg(0).toInt()#]
			println ("TABLE| remove $Nd...")
			[# //Dishes = Dishes - Nd  #]
			updateResource()
  		}
	}Goto work
}

QActor dishwasher context ctxSystem{
	[# var Dishes = 0#]
	State s0 initial {
		println ("DISHWASHER| loading initial state ")
		solve(consult("DishwasherInit.pl"))
	}Goto work 
		
	State work{
		println ("DISHWASHER| working")
	}
	Transition t0
	whenMsg consult -> exposeState
	whenMsg changeState-> handleChangeState
	
	State exposeState{
		println ("DISHWASHER | send consult...")
		forward maitre -m expose:expose($Dishes) 
 		}Goto work
	
	State handleChangeState{
		[# var Nd = 0	#]
		onMsg( changeState:add(X) ) { //X valore
			[# Nd= payloadArg(0).toInt() #]
	 		println ("DISHWASHER| add $Nd...")
			[# //Dishes = Dishes + Nd  #]
			updateResource()
 		}
 		onMsg( changeState:remove(X) ) { //X valore
			[# 	Nd= payloadArg(0).toInt() #]
	 		println ("DISHWASHER| remove $Nd...")
	 		[# //Dishes = Dishes - Nd  #]
	 		updateResource()
 		}	
	}Goto work
}

QActor fridge context ctxSystem{
//TODO concretizzare operazioni del frigo (ricerca e modifica stato)
	[#	var Foods = emptyArray<Int>()	#]
	State s0 initial {
		println ("FRIDGE | STARTS and it's embedded with the proper set of food")
	[# Foods = arrayOf(1,2,3,4,5)#]
		solve(consult("FridgeInit.pl"))
		delay 300
	}
	Goto wait

	State wait {
		println ("FRIDGE | is waiting for a command...")
	} 
	Transition t1 
		whenMsg askFood -> answerFood
		whenMsg consult -> exposeState
		whenMsg changeState -> getFoodPrepare
	
	State getFoodPrepare{
		[# var Fs = emptyArray<Int>()#]
 		//FIXME gestire food
		onMsg( changeState:add(X) ) { //X valore
			[# Fs = payloadArg(0).map{ it.toInt() }.toTypedArray() #]
	 		println ("FRIDGE | add $Fs...")
 		}
 		//FIXME gestire food
 		onMsg( changeState:remove(X) ) { //X valore
			[# 	Fs = payloadArg(0).map{ it.toInt() }.toTypedArray() #]
	 		println ("FRIDGE | remove $Fs...")
 		}
	}Goto wait

	State answerFood {
		//TODO con COAP
		[# var Food_Code = -1 
		   var FoodPresence = false
		   #]
		onMsg( askFood:askFood(X) ) {
	 		[# Food_Code = payloadArg(0).toInt() #]
 		}
		println ("FRIDGE | searching Food_Code $Food_Code...")		
		forward rbr -m answer:answer($FoodPresence)
		println ("FRIDGE | answered to RBR about food")
	}
	Goto wait
	
	State exposeState {
		forward maitre -m expose:expose($Foods)
		println ("FRIDGE | exposed content to maitre")
		updateResource()
	} 
	Goto wait		
}
