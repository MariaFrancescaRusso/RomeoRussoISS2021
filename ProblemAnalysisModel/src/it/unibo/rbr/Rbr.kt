/* Generated by AN DISI Unibo */ 
package it.unibo.rbr

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Rbr ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 	var FoodPresence = false 
				var PrepareDish = 0
				var PrepareFood = emptyArray<Int>()
				var ClearDish = 0
				var ClearFood = emptyArray<Int>()
				var IsMap = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("RBR | STARTS and it's placed in RH position")
						
									IsMap = true  	
									//util.ActorCoapObserver("localhost",8040,"ctxsystem","fridge").activate(myself)
					}
					 transition( edgeName="goto",targetState="working", cond=doswitchGuarded({ IsMap  
					}) )
					transition( edgeName="goto",targetState="mapping", cond=doswitchGuarded({! ( IsMap  
					) }) )
				}	 
				state("mapping") { //this:State
					action { //it:State
						println("RBR | initializing planner")
						println("RBR | start mapping room ")
						delay(300) 
						println("RBR | end mapping step")
						 IsMap = true 
					}
					 transition( edgeName="goto",targetState="working", cond=doswitch() )
				}	 
				state("working") { //this:State
					action { //it:State
						println("RBR | STARTS and it's ready to work")
					}
					 transition(edgeName="t00",targetState="exPrepare",cond=whenDispatch("prepare"))
				}	 
				state("exPrepare") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("prepare(X,Y)"), Term.createTerm("prepare(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 	PrepareDish = payloadArg(0).toInt()
												PrepareFood = payloadArg(1).map{ it.toInt() }.toTypedArray()
						}
						println("RBR | executing task 'Prepare the room'; DISHES= $PrepareDish; Foods= $PrepareFood:")
						println("RBR | going to pantry...")
						forward("remove", "remove($PrepareDish)" ,"pantry" ) 
						println("RBR | ...reached pantry. Going to table...")
						forward("addDishes", "addDishes($PrepareDish)" ,"table" ) 
						println("RBR | ...reached table. Going to fridge...")
						forward("remove", "remove($PrepareFood)" ,"fridge" ) 
						println("RBR | ...reached fridge. Going to table...")
						forward("addFood", "addFood($PrepareFood)" ,"table" ) 
						println("RBR | ...reached table. Coming back to RH...")
						println("RBR | ...reached RH. Finished executing task")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("RBR | is placed in RH position and it's waiting for a command...")
					}
					 transition(edgeName="t11",targetState="checkFood",cond=whenDispatch("addFood"))
					transition(edgeName="t12",targetState="exClear",cond=whenDispatch("clear"))
				}	 
				state("checkFood") { //this:State
					action { //it:State
						 var Food_Code = -1  
						if( checkMsgContent( Term.createTerm("addFood(FOODE_CODE)"), Term.createTerm("addFood(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Food_Code = payloadArg(0).toInt()  
						}
						forward("askFood", "askFood($Food_Code)" ,"fridge" ) 
						println("RBR | asked fridge if it contains the food with food-code = $Food_Code")
					}
					 transition(edgeName="t23",targetState="handleReply",cond=whenEvent("observerfridge"))
				}	 
				state("handleReply") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("observerfridge(X)"), Term.createTerm("observerfridge(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 FoodPresence = payloadArg(0).toBoolean()  
						}
						println("RBR | received answer from fridge: $FoodPresence")
					}
					 transition( edgeName="goto",targetState="fail", cond=doswitchGuarded({ FoodPresence == false  
					}) )
					transition( edgeName="goto",targetState="exAddFood", cond=doswitchGuarded({! ( FoodPresence == false  
					) }) )
				}	 
				state("fail") { //this:State
					action { //it:State
						answer("addFood", "warning", "warning(w)"   )  
						println("RBR | send warning to maitre")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("exAddFood") { //this:State
					action { //it:State
						println("RBR | executing task 'Add food'")
						println("RBR | going to fridge...")
						println("RBR | ...reached fridge. Going to table...")
						println("RBR | ...reached table. Coming back to RH...")
						println("RBR | ...reached RH. Finished executing task")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("exClear") { //this:State
					action { //it:State
						 	ClearDish = PrepareDish 
									ClearFood = PrepareFood
						println("RBR | executing task 'Clear the room':")
						println("RBR | going to table...")
						forward("removeFood", "removeFood($ClearFood)" ,"table" ) 
						println("RBR | ...reached table. Going to fridge...")
						forward("add", "add($ClearFood)" ,"fridge" ) 
						println("RBR | ...reached fridge. Going to table...")
						forward("removeDishes", "removeDishes($ClearDish)" ,"table" ) 
						println("RBR | ...reached table. Going to dishwasher...")
						forward("add", "add($ClearDish)" ,"dishwasher" ) 
						println("RBR | ...reached dishwasher. Coming back to RH...")
						println("RBR | ...reached RH. Finished executing task")
						terminate(0)
					}
				}	 
			}
		}
}
