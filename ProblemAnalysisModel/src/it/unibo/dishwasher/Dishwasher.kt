/* Generated by AN DISI Unibo */ 
package it.unibo.dishwasher

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Dishwasher ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var Dishes = 0 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("DISHWASHER| loading initial state ")
						solve("consult('DishwasherInit.pl')","") //set resVar	
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("DISHWASHER| working")
					}
					 transition(edgeName="t011",targetState="exposeState",cond=whenDispatch("consult"))
					transition(edgeName="t012",targetState="handleChangeState",cond=whenDispatch("changeState"))
				}	 
				state("exposeState") { //this:State
					action { //it:State
						println("DISHWASHER | send consult...")
						forward("expose", "expose($Dishes)" ,"maitre" ) 
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleChangeState") { //this:State
					action { //it:State
						 var Nd = 0	 
						if( checkMsgContent( Term.createTerm("changeState(X)"), Term.createTerm("add(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Nd= payloadArg(0).toInt()  
								println("DISHWASHER| add $Nd...")
								 Dishes = Dishes + Nd   
						}
						if( checkMsgContent( Term.createTerm("changeState(X)"), Term.createTerm("remove(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 	Nd= payloadArg(0).toInt()  
								println("DISHWASHER| remove $Nd...")
								 Dishes = Dishes - Nd   
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
