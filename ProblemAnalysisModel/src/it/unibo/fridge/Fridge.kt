/* Generated by AN DISI Unibo */ 
package it.unibo.fridge

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Fridge ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
			var Foods = emptyArray<Int>()	 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("FRIDGE | STARTS and it's embedded with the proper set of food")
						 Foods = arrayOf(1,2,3,4,5) 
						solve("consult('FridgeInit.pl')","") //set resVar	
						delay(300) 
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("FRIDGE | is waiting for a command...")
					}
					 transition(edgeName="t113",targetState="answerFood",cond=whenDispatch("askFood"))
					transition(edgeName="t114",targetState="exposeState",cond=whenDispatch("consult"))
					transition(edgeName="t115",targetState="getFoodPrepare",cond=whenDispatch("changeState"))
				}	 
				state("getFoodPrepare") { //this:State
					action { //it:State
						 var Fs = emptyArray<Int>() 
						if( checkMsgContent( Term.createTerm("changeState(X)"), Term.createTerm("add(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Fs = payloadArg(0).map{ it.toInt() }.toTypedArray()  
								println("FRIDGE | add $Fs...")
						}
						if( checkMsgContent( Term.createTerm("changeState(X)"), Term.createTerm("remove(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 	Fs = payloadArg(0).map{ it.toInt() }.toTypedArray()  
								println("FRIDGE | remove $Fs...")
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("answerFood") { //this:State
					action { //it:State
						 var Food_Code = -1 
								   var FoodPresence = false
						if( checkMsgContent( Term.createTerm("askFood(FOODE_CODE)"), Term.createTerm("askFood(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Food_Code = payloadArg(0).toInt()  
						}
						println("FRIDGE | searching Food_Code $Food_Code...")
						forward("answer", "answer($FoodPresence)" ,"rbr" ) 
						println("FRIDGE | answered to RBR about food")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("exposeState") { //this:State
					action { //it:State
						forward("expose", "expose($Foods)" ,"maitre" ) 
						println("FRIDGE | exposed content to maitre")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
