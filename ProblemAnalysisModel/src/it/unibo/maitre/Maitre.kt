/* Generated by AN DISI Unibo */ 
package it.unibo.maitre

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Maitre ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(2000) 
						println("MAITRE | STARTS")
						forward("prepare", "prepare(0)" ,"rbr" ) 
						println("MAITRE | send prepare command to RBR")
						forward("addFood", "addFood(1500)" ,"rbr" ) 
						println("MAITRE | send addFood(food_code) command to RBR")
						stateTimer = TimerActor("timer_s0", 
							scope, context!!, "local_tout_maitre_s0", 3000.toLong() )
					}
					 transition(edgeName="t16",targetState="s3",cond=whenTimeout("local_tout_maitre_s0"))   
					transition(edgeName="t17",targetState="s2",cond=whenDispatch("warning"))
				}	 
				state("s2") { //this:State
					action { //it:State
						println("MAITRE | received warning from RBR")
					}
					 transition( edgeName="goto",targetState="s3", cond=doswitch() )
				}	 
				state("s3") { //this:State
					action { //it:State
						println("MAITRE | send consult command to Fridge")
						request("consult", "consult(0)" ,"fridge" )  
					}
					 transition(edgeName="t28",targetState="s4",cond=whenReply("expose"))
				}	 
				state("s4") { //this:State
					action { //it:State
						 var ansExpose = " "  
						if( checkMsgContent( Term.createTerm("expose(ARG)"), Term.createTerm("expose(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 ansExpose= payloadArg(0)  
						}
						println("MAITRE | received expose from fridge: $ansExpose")
						forward("clear", "clear(0)" ,"rbr" ) 
					}
				}	 
			}
		}
}
