/* Generated by AN DISI Unibo */ 
package it.unibo.maitre

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Maitre ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
			
				var AddFoodtime = 20000L 
				var Nexp = 0
				var AnsExpose1 = ""
				var AnsExpose2 = ""
				var ClearDish = ""
				var ClearFood = ""
				var Prepared = false
				var Cleared = false
				var Stopped = false
				var ConsultStr = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("MAITRE | STARTS...")
						solve("consult('Prepare.pl')","") //set resVar	
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("MAITRE | waiting...")
					}
					 transition(edgeName="t00",targetState="sendPrepare",cond=whenDispatchGuarded("prepare",{ !Prepared  
					}))
					transition(edgeName="t01",targetState="sendConsult",cond=whenDispatch("consult"))
					transition(edgeName="t02",targetState="sendAddFood",cond=whenDispatchGuarded("addFood",{ Prepared && !Cleared  
					}))
					transition(edgeName="t03",targetState="sendClear",cond=whenDispatchGuarded("clear",{ Prepared && !Cleared  
					}))
					transition(edgeName="t04",targetState="sendStop",cond=whenDispatch("stop"))
					transition(edgeName="t05",targetState="terminateMaitre",cond=whenDispatch("end"))
				}	 
				state("sendPrepare") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("prepare(X,Y)"), Term.createTerm("prepare(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var Crockery = payloadArg(0)
												var Food = payloadArg(1)
								if(  Crockery != ""  
								 ){solve("replaceCrockery($Crockery)","") //set resVar	
								if( currentSolution.isSuccess() ) {println("MAITRE | updated crockery elements for prepare command with $Crockery")
								}
								else
								{println("MAITRE | Error updating 'Prepare the room' elements...")
								}
								}
								if(  Food != ""  
								 ){solve("replaceFood($Food)","") //set resVar	
								if( currentSolution.isSuccess() ) {println("MAITRE | updated food elements for prepare command with $Food")
								}
								else
								{println("MAITRE | Error updating 'Prepare the room' elements...")
								}
								}
						}
						solve("getAllEl(Crockery,Foods)","") //set resVar	
						if( currentSolution.isSuccess() ) {forward("prepare", "prepare(${getCurSol("Crockery")},${getCurSol("Foods")})" ,"rbr" ) 
						println("MAITRE | send prepare command to RBR: ${getCurSol("Crockery")}, ${getCurSol("Foods")}")
						}
						else
						{println("MAITRE | Error getting 'Prepare the room' elements...")
						}
						 Prepared = true  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("sendAddFood") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("addFood(FOOD_CODE)"), Term.createTerm("addFood(FOODCODE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var FoodCode = payloadArg(0)  
								if(  FoodCode != ""  
								 ){solve("replaceFoodCode($FoodCode)","") //set resVar	
								if( currentSolution.isSuccess() ) {println("MAITRE | updated food_code element for addFood command with $FoodCode")
								}
								else
								{println("MAITRE | Error updating 'Add food' element...")
								}
								}
						}
						solve("getFoodCodeEl(FoodCode)","") //set resVar	
						if( currentSolution.isSuccess() ) {request("addFood", "addFood(${getCurSol("FoodCode")})" ,"rbr" )  
						println("MAITRE | send addFood(${getCurSol("FoodCode")}) command to RBR")
						}
						else
						{println("MAITRE | Error getting Food_Code for 'Add Food' task elements...")
						}
						stateTimer = TimerActor("timer_sendAddFood", 
							scope, context!!, "local_tout_maitre_sendAddFood", AddFoodtime )
					}
					 transition(edgeName="t16",targetState="wait",cond=whenTimeout("local_tout_maitre_sendAddFood"))   
					transition(edgeName="t17",targetState="handleWarning",cond=whenReply("warning"))
				}	 
				state("handleWarning") { //this:State
					action { //it:State
						println("MAITRE | received warning from RBR")
						updateResourceRep( "Warning! The fridge doesn't contain the food required!"  
						)
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("sendConsult") { //this:State
					action { //it:State
						forward("consult", "consult(0)" ,"fridge" ) 
						println("MAITRE | send consult command to Fridge")
						forward("consult", "consult(0)" ,"dishwasher" ) 
						println("MAITRE | send consult command to Dishwasher")
						forward("consult", "consult(0)" ,"pantry" ) 
						println("MAITRE | send consult command to Pantry")
						forward("consult", "consult(0)" ,"table" ) 
						println("MAITRE | send consult command to Table")
					}
					 transition( edgeName="goto",targetState="waitExpose", cond=doswitch() )
				}	 
				state("waitExpose") { //this:State
					action { //it:State
						println("MAITRE | waiting answers from resources...")
					}
					 transition(edgeName="t28",targetState="handleExpose",cond=whenEvent("observerdishwasher"))
					transition(edgeName="t29",targetState="handleExpose",cond=whenEvent("observerfridge"))
					transition(edgeName="t210",targetState="handleExpose",cond=whenEvent("observerpantry"))
					transition(edgeName="t211",targetState="handleExpose",cond=whenEvent("observertable"))
				}	 
				state("handleExpose") { //this:State
					action { //it:State
						  
									var Sender = currentMsg.msgSender().removePrefix("observer")
									Nexp++ 
						if( checkMsgContent( Term.createTerm("observerdishwasher(X)"), Term.createTerm("observerdishwasher(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 AnsExpose1 = payloadArg(0)  
						}
						if( checkMsgContent( Term.createTerm("observerfridge(X)"), Term.createTerm("observerfridge(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 AnsExpose1 = payloadArg(0)  
						}
						if( checkMsgContent( Term.createTerm("observerpantry(X)"), Term.createTerm("observerpantry(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 AnsExpose1 = payloadArg(0)  
						}
						if( checkMsgContent( Term.createTerm("observertable(X)"), Term.createTerm("observertable(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
									 			var Temp = payloadArg(0).split(";")
									 			AnsExpose1 = Temp.get(0)
									 			AnsExpose2 = Temp.get(1)
						}
						if(  Sender == "table"  
						 ){println("MAITRE | status of $Sender: $AnsExpose1 $AnsExpose2")
						 ConsultStr += "{$Sender:$AnsExpose1;$AnsExpose2}+"  
						}
						else
						 {println("MAITRE | status of $Sender: $AnsExpose1")
						  ConsultStr += "{$Sender:$AnsExpose1}+"  
						 }
						if(  Nexp == 4  
						 ){updateResourceRep( "$ConsultStr"  
						)
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitchGuarded({	Nexp == 4  
					}) )
					transition( edgeName="goto",targetState="waitExpose", cond=doswitchGuarded({! (	Nexp == 4  
					) }) )
				}	 
				state("preSendClear") { //this:State
					action { //it:State
						forward("consult", "consult(0)" ,"table" ) 
						println("MAITRE | send consult command to Table for 'Clear the room' task")
					}
					 transition(edgeName="t312",targetState="sendClear",cond=whenEvent("observertable"))
				}	 
				state("sendClear") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("observertable(X)"), Term.createTerm("observertable(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
									 			var Temp = payloadArg(0).split(";")
									 			ClearDish = Temp.get(0)
									 			ClearFood = Temp.get(1)
						}
						println("MAITRE | status of Table: Crockery = $ClearDish and Food = $ClearFood")
						forward("clear", "clear($ClearDish,$ClearFood)" ,"rbr" ) 
						println("MAITRE | send clear command to RBR: Food = $ClearFood and Crockery = $ClearDish")
						 Cleared = true  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("sendStop") { //this:State
					action { //it:State
						request("stop", "stop(0)" ,"rbrwalker" )  
						println("MAITRE | send stop command to RBR WALKER")
					}
					 transition(edgeName="t413",targetState="handleStop",cond=whenReply("stopped"))
				}	 
				state("handleStop") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("stopped(ARG)"), Term.createTerm("stopped(false)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("MAITRE | Failed stop: there is no activated task!")
								updateResourceRep( "There is NO activated task!"  
								)
								 Stopped = false  
						}
						if( checkMsgContent( Term.createTerm("stopped(ARG)"), Term.createTerm("stopped(true)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								updateResourceRep( "Task stopped with success!"  
								)
								 Stopped = true  
						}
					}
					 transition( edgeName="goto",targetState="waitReactivate", cond=doswitchGuarded({ Stopped  
					}) )
					transition( edgeName="goto",targetState="wait", cond=doswitchGuarded({! ( Stopped  
					) }) )
				}	 
				state("waitReactivate") { //this:State
					action { //it:State
						println("MAITRE | waiting for reactivate command...")
					}
					 transition(edgeName="t514",targetState="sendReactivate",cond=whenDispatch("reactivate"))
				}	 
				state("sendReactivate") { //this:State
					action { //it:State
						forward("reactivate", "reactivate(0)" ,"rbrwalker" ) 
						println("MAITRE | send reactivate command to RBR WALKER")
						 Stopped = false  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("terminateMaitre") { //this:State
					action { //it:State
						println("MAITRE | terminating...")
						terminate(1)
					}
				}	 
			}
		}
}
