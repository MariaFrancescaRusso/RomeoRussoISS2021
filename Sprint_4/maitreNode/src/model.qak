System maitre 

//Observer Resources - Maitre/RBR 
Event observerfridge:observerfridge(X)
Event observerpantry:observerpantry(X)
Event observertable:observertable(X)
Event observerdishwasher:observerdishwasher(X)

//vs Maitre
Dispatch addFood:addFood(FOOD_CODE)
Dispatch stop:stop(ARG)	//void

//vs Maitre
//Maitre - RBR
Dispatch prepare:prepare(X, Y)	//X = Crockery elements ; Y = Food elements
Dispatch clear:clear(X, Y)	//X = Crockery elements ; Y = Food elements

//Maitre - RBR
Request addFood:addFood(FOOD_CODE)

Reply warning:warning(ARG)	//void

//vs Maitre
//Maitre - Fridge/Resources
Dispatch consult:consult(ARG)	//void
 
//Maitre - RBRWalker
Request stop:stop(ARG)	//void

Reply stopped:stopped(ARG)	//ARG = true | false

//vs Maitre
//Maitre - RBRWalker
Dispatch reactivate:reactivate(ARG)	//void


//RBR - Resources
Dispatch changeState:changeState(X, ARG)	//X = add | remove ; ARG = state to change

//vs Maitre
//RBR - RBRMapper
//RBR - RBRWalker
//RBRWalker - basicRobot
Dispatch end:end(ARG)	//void

//RBRWalker - basicRobot
//RBRMapper - basicRobot
Dispatch cmd:cmd(MOVE)	//MOVE = h | w | s | l | r
Request step:step(TIME)

Reply stepdone:stepdone(V)  
Reply stepfail:stepfail(DURATION, CAUSE)  

//Context ctxsystem ip [host="localhost" port=8040]
//192.168.1.171/211/14/40
Context ctxmaitre ip [host="localhost" port=8070] 
Context ctxfridge ip [host="127.0.0.1" port=8060]
Context ctxrbr ip [host="192.168.43.228" port=8050]

ExternalQActor rbr context ctxrbr
ExternalQActor rbrwalker context ctxrbr  
ExternalQActor fridge context ctxfridge  

QActor maitre context ctxmaitre {
//QActor maitre context ctxsystem {
	[#	
		var AddFoodtime = 3000L 
		var Nexp = 0
		var AnsExpose1 = ""
		var AnsExpose2 = ""
		var ClearDish = ""
		var ClearFood = ""
		var Prepared = false
		var Cleared = false
		var Stopped = false
		var ConsultStr = ""
	#]
	
	State s0 initial {
		println ("MAITRE | STARTS...")
		
		// To load crockery and food elements for prepare command
		solve( consult("Prepare.pl") )
	}
	Goto wait
	
	State wait {
		println ("MAITRE | waiting...")
	}
	Transition t0
		whenMsg prepare and [# !Prepared #] -> sendPrepare
		whenMsg consult -> sendConsult
		whenMsg addFood and [# Prepared && !Cleared #] -> sendAddFood
		whenMsg clear and [# Prepared && !Cleared #] -> preSendClear
		whenMsg stop -> sendStop 
		whenMsg end -> terminateMaitre
	
	State sendPrepare {	
		// Prepare control if the user want to change the arguments:
		onMsg ( prepare : prepare(X, Y) ) {
			[#
				var Crockery = payloadArg(0)
				var Food = payloadArg(1)
			#]
			
			if [# Crockery != "" #] {
				solve( replaceCrockery($Crockery) )
				ifSolved {			
					println ("MAITRE | updated crockery elements for prepare command with $Crockery")
				}
				else {
					println ("MAITRE | Error updating 'Prepare the room' elements...")
				}
			}
			
			if [# Food != "" #] {
				solve( replaceFood($Food) )
				ifSolved {			
					println ("MAITRE | updated food elements for prepare command with $Food")
				}
				else {
					println ("MAITRE | Error updating 'Prepare the room' elements...")
				}
			}
		}
			
		solve( getAllEl(Crockery, Foods) )
		ifSolved {			
			forward rbr -m prepare : prepare($getCurSol("Crockery"), $getCurSol("Foods"))
			println ("MAITRE | send prepare command to RBR: ${getCurSol(\"Crockery\")}, ${getCurSol(\"Foods\")}")
		}
		else {
			println ("MAITRE | Error getting 'Prepare the room' elements...")
		}	
		
		[# Prepared = true #]
	}
	Goto wait
	
	State sendAddFood {		
		// AddFood control if the user want to change the Food_Code:
		onMsg ( addFood : addFood(FOODCODE) ) {
			[# var FoodCode = payloadArg(0) #]
			if [# FoodCode != "" #] {
				solve( replaceFoodCode($FoodCode) )
				ifSolved {			
					println ("MAITRE | updated food_code element for addFood command with $FoodCode")
				}
				else {
					println ("MAITRE | Error updating 'Add food' element...")
				}
			}
		}
		
		solve( getFoodCodeEl(FoodCode) )
		ifSolved {			
			request rbr -m addFood : addFood($getCurSol("FoodCode"))
			println ("MAITRE | send addFood(${getCurSol(\"FoodCode\")}) command to RBR")				
		}
		else {
			println ("MAITRE | Error getting Food_Code for 'Add Food' task elements...")
		}
	}
	Transition t1 
		// Time waiting for warning otherwise the food is present
		whenTimeVar AddFoodtime -> handleWarning
		whenReply warning -> handleWarning
			
	State handleWarning {
		[# var FoodPresence = true #]
		
		onMsg ( warning : warning(W) ) {		
			println ("MAITRE | received warning from RBR")
			updateResource [# "Warning! The fridge doesn't contain the food required!" #]
			[# FoodPresence = false #]
		
		}
		
		if [# FoodPresence #] {
			updateResource [# "Request accepted!" #]
		}
	}
	Goto wait

	State sendConsult {	
		forward fridge -m consult : consult(0)
		println ("MAITRE | send consult command to Fridge")
		
		forward dishwasher -m consult : consult(0)
		println ("MAITRE | send consult command to Dishwasher")
		
		forward pantry -m consult : consult(0)
		println ("MAITRE | send consult command to Pantry")
		
		forward table -m consult : consult(0)
		println ("MAITRE | send consult command to Table")
	}
	Goto waitExpose

	State waitExpose {
		println ("MAITRE | waiting answers from resources...")
	}
	Transition t2
		whenEvent observerdishwasher -> handleExpose
		whenEvent observerfridge -> handleExpose
		whenEvent observerpantry -> handleExpose
		whenEvent observertable -> handleExpose

	State handleExpose {
		[#  
			var Sender = currentMsg.msgSender().removePrefix("observer")
			Nexp++ 
		#]
		
		onMsg( observerdishwasher : observerdishwasher(X) ) {
	 		[# AnsExpose1 = payloadArg(0) #]
 		}
 		onMsg( observerfridge : observerfridge(X) ) {
	 		[# AnsExpose1 = payloadArg(0) #]
 		}
 		onMsg( observerpantry : observerpantry(X) ) {
	 		[# AnsExpose1 = payloadArg(0) #]
 		}
 		onMsg( observertable : observertable(X) ) {
	 		[# 
	 			var Temp = payloadArg(0).split(";")
	 			AnsExpose1 = Temp.get(0)
	 			AnsExpose2 = Temp.get(1)
	 		#] 
 		}
 		
 		if [# Sender == "table" #] {
			println ("MAITRE | status of $Sender: $AnsExpose1 $AnsExpose2")
			[# ConsultStr += "{$Sender:\"$AnsExpose1;$AnsExpose2\"}+" #]
 		}
 		else { 
 			println ("MAITRE | status of $Sender: $AnsExpose1")
 			[# ConsultStr += "{$Sender:\"$AnsExpose1\"}+" #]
 		}
 		
 		if [# Nexp == 4 #] {
 			updateResource [# "$ConsultStr" #]
 		}
	}
	Goto checkStopped if [#	Nexp == 4 #] else waitExpose
	
	// To check, after a consult, if the rbr state was stopped
	State checkStopped {
		[# Nexp = 0 #]
	}
	Goto waitReactivate if [# Stopped #] else wait
	
	// maitre sends a consult command to table before sending clear command to rbr 
	State preSendClear {
		forward table -m consult : consult(0)
		println ("MAITRE | send consult command to Table for 'Clear the room' task")
	}
	Transition t3
		whenEvent observertable -> sendClear
	
	State sendClear {
		onMsg( observertable : observertable(X) ) {	 		
	 		[# 
	 			var Temp = payloadArg(0).split(";")
	 			ClearDish = Temp.get(0)
	 			ClearFood = Temp.get(1)
	 		#]
 		}
 				
		println ("MAITRE | status of Table: Crockery = $ClearDish and Food = $ClearFood")
		
		forward rbr -m clear : clear($ClearDish, $ClearFood)
		println ("MAITRE | send clear command to RBR: Food = $ClearFood and Crockery = $ClearDish")
		
		[# Cleared = true #]
	}
	Goto wait
	
	State sendStop {
		request rbrwalker -m stop : stop(0)
		println ("MAITRE | send stop command to RBR WALKER")
	}
	Transition t4
		whenReply stopped -> handleStop
	
	State handleStop {		
		onMsg( stopped : stopped(false) ) {
			println ("MAITRE | Failed stop: there is no activated task!")
			updateResource [# "There is NO activated task!" #]
			[# Stopped = false #]
		}	
		
		onMsg( stopped : stopped(true) ) {
			updateResource [# "Task stopped with success!" #]
			[# Stopped = true #]
		}	
	}
	Goto waitReactivate if [# Stopped #] else wait
	
	State waitReactivate {
		println ("MAITRE | waiting for reactivate command...")
	}
	Transition t5
		whenMsg reactivate -> sendReactivate
		whenMsg consult -> sendConsult
	
	State sendReactivate {	
		forward rbrwalker -m reactivate : reactivate(0)
		println ("MAITRE | send reactivate command to RBR WALKER")
		[# Stopped = false #]		
	}
	Goto wait
	
	State terminateMaitre {
		println ("MAITRE | terminating...")
		terminate 1
	}
}

// Actor foodconsumer is used as a mock client
QActor foodconsumer context ctxmaitre {
//QActor foodconsumer context ctxsystem {
	
	State s0 initial {
		println ("FOODCONSUMER | STARTS and it's very hungry...")
		
		solve( consult("Consumer.pl") )
		delay 70000	//50000
	}
	Goto eat
		
	State eat {
		println ("FOODCONSUMER | chooses the food he wants to eat")
		solve( getFoodEl(Foods) )
		ifSolved {	
			println ("FOODCONSUMER | eating from table ${getCurSol(\"Foods\")}...")
			forward table -m changeState : changeState(remove, $getCurSol("Foods")) 
			println ("FOODCONSUMER | is now happy")			
		}
		else {
			println ("FOODCONSUMER | Error getting food to consume...")
		}
			
		terminate 1
	}
}

QActor pantry context ctxmaitre {
//QActor pantry context ctxsystem {
	
	State s0 initial {
	
		println ("PANTRY | STARTS and it's filled with a proper set of items...")
		
		solve( consult("PantryState.pl") )
		println ("PANTRY | loaded initial state")					
	
		[#
			val PantryObserver = util.ActorCoapObserver(context!!.hostAddr,context!!.portNum,context!!.getName(),name)
//			val PantryObserver = util.ActorCoapObserver("192.168.1.171",8070,"ctxmaitre","pantry")
			PantryObserver.activate(myself, arrayListOf("Added", "Removed", "Fail")) 
		#]
		println ("PANTRY | activated PantryObserver")
	}
	Goto work
	
	State work {
		println ("PANTRY| working...")
	}
	Transition t0
		whenMsg consult -> exposeState
		whenMsg changeState -> handleChangeState
			
	State exposeState {
		solve( getAllEl(Crockery) )
		ifSolved {
			println ("PANTRY | Crockery : ${getCurSol(\"Crockery\")}")
			updateResource [# "${getCurSol("Crockery")}" #]
		}
		else {
			println ("PANTRY | Error consulting pantry...")
			updateResource [# "ERROR" #]
		}
		
		println ("PANTRY| sending state informations/exposed content to maitre...")
 	}
 	Goto work
	
	State handleChangeState {
		[# var Crockery = "" #]
		
		onMsg( changeState : changeState(add, ARG) ) { 
	 		[# Crockery = payloadArg(1) #]
	 		
	 		solve( add($Crockery) )
			ifSolved {
				println ("PANTRY | added Crockery : $Crockery...")
				updateResource [# "Added Crockery $Crockery with success!" #]
			}
			else {
				println ("PANTRY | Error adding Crockery : $Crockery...")				
				updateResource [# "Fail adding Crockery $Crockery!" #]
			}
 		}
 		
 		onMsg( changeState : changeState(remove, ARG) ) { 
			[# Crockery = payloadArg(1) #]
			
			solve( remove($Crockery) )
			ifSolved {
				println ("PANTRY | removed Crockery : $Crockery...")
				updateResource [# "Removed Crockery $Crockery with success!" #]
			}
			else {
				println ("PANTRY | Error removing Crockery : $Crockery...")				
				updateResource [# "Fail removing Crockery $Crockery!" #]
			}
 		}	
 	}
 	Goto work	
}

QActor table context ctxmaitre {
//QActor table context ctxsystem {
	
	State s0 initial {
		println ("TABLE | STARTS and it's empty...")
		
		solve( consult("TableState.pl") )
		println ("TABLE| loaded initial state") 

		[#
			val TableObserver = util.ActorCoapObserver(context!!.hostAddr,context!!.portNum,context!!.getName(),name)
//			val TableObserver = util.ActorCoapObserver("192.168.1.171",8070,"ctxmaitre","table")		
			TableObserver.activate(myself, arrayListOf("Added", "Removed", "Fail")) 
		#]
		println ("TABLE | activated TableObserver")
	}
	Goto work
	
	State work {
		println ("TABLE| working...")
	}
	Transition t0
		whenMsg consult -> exposeState
		whenMsg changeState -> handleChangeState
		
	State exposeState {
		solve( getAllEl(Crockery, Foods) )
		ifSolved {			
			println ("TABLE | Crockery = ${getCurSol(\"Crockery\")} Foods = ${getCurSol(\"Foods\")}")
			updateResource [# "${getCurSol("Crockery")};${getCurSol("Foods")}" #]
		}
		else {
			println ("TABLE | Error Error consulting table...")
			updateResource [# "ERROR" #]
		}

		println ("TABLE| sending state informations/exposed content to maitre...")
 	}
 	Goto work
	
	State handleChangeState {
		[# var CrockeryOrFood = "" #]
		
		onMsg( changeState : changeState(add, ARG) ) { 
			[# CrockeryOrFood = payloadArg(1) #]
			
			solve( add($CrockeryOrFood) )
			ifSolved {
				println ("TABLE | added $CrockeryOrFood...")				
				updateResource [# "Added $CrockeryOrFood with success!" #]
			}
			else {
				println ("TABLE | Error adding $CrockeryOrFood...")				
				updateResource [# "Fail adding $CrockeryOrFood!" #]
			}
 		}
 		
 		onMsg( changeState : changeState(remove, ARG) ) {
			[# CrockeryOrFood = payloadArg(1) #]
			
			solve( remove($CrockeryOrFood) )
			ifSolved {
				println ("TABLE | removed $CrockeryOrFood...")	
				updateResource [# "Removed $CrockeryOrFood with success!" #]
			}
			else {
				println ("TABLE | Error removing $CrockeryOrFood...")
				updateResource [# "Fail removing $CrockeryOrFood!" #]
			}
		}
	}
	Goto work
}

QActor dishwasher context ctxmaitre {
//QActor dishwasher context ctxsystem {
	
	State s0 initial {
		println ("DISHWASHER | STARTS and it's empty...")
		
		solve( consult("DishwasherState.pl") )
		println ("DISHWASHER | loaded initial state")
		[#
			val DishwasherObserver = util.ActorCoapObserver(context!!.hostAddr,context!!.portNum,context!!.getName(),name)
//			val DishwasherObserver = util.ActorCoapObserver("192.168.1.171",8070,"ctxmaitre","dishwasher")	
			DishwasherObserver.activate(myself, arrayListOf("Added", "Removed", "Fail")) 
		#]
		println ("DISHWASHER | activated DishwasherObserver")
	}
	Goto work 
		
	State work {
		println ("DISHWASHER| working...")
	}
	Transition t0
		whenMsg consult -> exposeState
		whenMsg changeState -> handleChangeState	
	
	State exposeState {
		solve( getAllEl(Crockery) )
		ifSolved {
			println ("DISHWASHER | Crockery = ${getCurSol(\"Crockery\")}")
			updateResource [# "${getCurSol("Crockery")}" #]
		}
		else {
			println ("DISHWASHER | Error consulting dishwasher...")
			updateResource [# "ERROR" #]
		}
 
		println ("DISHWASHER | sending state informations/exposed content to maitre...")
 	}
 	Goto work
	
	State handleChangeState {
		[# var Crockery = "" #]

 		onMsg( changeState : changeState(add, ARG) ) { 
	 		[# Crockery = payloadArg(1) #]
	 		
	 		solve( add($Crockery) )
			ifSolved {
				println ("DISHWASHER | added Crockery : $Crockery...")
				updateResource [# "Added Crockery $Crockery with success!" #]
			}
			else {
				println ("DISHWASHER | Error adding Crockery : $Crockery...")
				updateResource [# "Fail adding Crockery $Crockery!" #]
			}
 		}
 		
 		onMsg( changeState : changeState(remove, ARG) ) { 
			[# Crockery = payloadArg(1) #]
			
			solve( remove($Crockery) )
			ifSolved {
				println ("DISHWASHER | removed Crockery : $Crockery...")
				updateResource [# "Removed Crockery $Crockery with success!" #]
			}
			else {
				println ("DISHWASHER | Error removing Crockery : $Crockery...")
				updateResource [# "Fail removing Crockery $Crockery!" #]
			}
 		}	
	}
	Goto work
}
