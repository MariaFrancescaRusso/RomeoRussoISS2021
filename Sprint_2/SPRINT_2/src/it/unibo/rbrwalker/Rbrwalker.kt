/* Generated by AN DISI Unibo */ 
package it.unibo.rbrwalker

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Rbrwalker ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var Dir = ""		
				var CurrMov = "empty"
				var X = ""
				var Y = ""
				var FirstStart = true
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("WALKER | STARTS...")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("WALKER | waits a goal...")
					}
					 transition(edgeName="t028",targetState="goToGoal",cond=whenRequest("setGoal"))
					transition(edgeName="t029",targetState="terminateWalker",cond=whenDispatch("end"))
				}	 
				state("goToGoal") { //this:State
					action { //it:State
						if(  FirstStart  
						 ){itunibo.planner.plannerUtil.initAI(  )
						itunibo.planner.plannerUtil.loadRoomMap( "roomMap"  )
						itunibo.planner.plannerUtil.showMap(  )
						 FirstStart = false 
						}
						if( checkMsgContent( Term.createTerm("setGoal(X,Y,DIR)"), Term.createTerm("setGoal(X,Y,DIR)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												X = payloadArg(0)
												Y = payloadArg(1)
												Dir = payloadArg(2)
								println("WALKER | received the goal ($X, $Y)...")
								itunibo.planner.plannerUtil.startTimer(  )
								itunibo.planner.plannerUtil.planForGoal( X, Y  )
								itunibo.planner.plannerUtil.getDuration(  )
						}
						 CurrMov = itunibo.planner.plannerUtil.getNextPlannedMove()  
					}
					 transition( edgeName="goto",targetState="correctDirection", cond=doswitchGuarded({ CurrMov == ""  
					}) )
					transition( edgeName="goto",targetState="doMove", cond=doswitchGuarded({! ( CurrMov == ""  
					) }) )
				}	 
				state("doMove") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="doStep", cond=doswitchGuarded({ CurrMov == "w"  
					}) )
					transition( edgeName="goto",targetState="doTurn", cond=doswitchGuarded({! ( CurrMov == "w"  
					) }) )
				}	 
				state("doStep") { //this:State
					action { //it:State
						request("step", "step(650)" ,"basicrobot" )  
						itunibo.planner.plannerUtil.updateMap( CurrMov  )
						delay(1000) 
					}
					 transition(edgeName="t130",targetState="handleAnswer",cond=whenReply("stepdone"))
					transition(edgeName="t131",targetState="handleAnswer",cond=whenReply("stepfail"))
				}	 
				state("doTurn") { //this:State
					action { //it:State
						forward("cmd", "cmd($CurrMov)" ,"basicrobot" ) 
						itunibo.planner.plannerUtil.updateMap( CurrMov  )
						delay(1000) 
					}
					 transition( edgeName="goto",targetState="goToGoal", cond=doswitch() )
				}	 
				state("handleAnswer") { //this:State
					action { //it:State
						 var C = ""  
						if( checkMsgContent( Term.createTerm("stepfail(DURATION,CAUSE)"), Term.createTerm("stepfail(D,C)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 C = payloadArg(1)  
								println("WALKER | failed execution move: found $C")
						}
					}
					 transition( edgeName="goto",targetState="goToGoal", cond=doswitch() )
				}	 
				state("correctDirection") { //this:State
					action { //it:State
						
									var CurDir = ""
									var CurPos : Pair<Int, Int> ?= null
						
									CurDir = itunibo.planner.plannerUtil.getDirection()
									while (CurDir != Dir) {
						if(  (Dir == "leftDir" && CurDir == "upDir") || (Dir == "rightDir" && CurDir == "downDir") 
										   || (Dir == "upDir" && CurDir == "rightDir") || (Dir == "downDir" && CurDir == "leftDir")  
						 ){forward("cmd", "cmd(l)" ,"basicrobot" ) 
						itunibo.planner.plannerUtil.updateMap( "l"  )
						}
						else
						 {forward("cmd", "cmd(r)" ,"basicrobot" ) 
						 itunibo.planner.plannerUtil.updateMap( "r"  )
						 }
						delay(1000) 
						
										CurDir = itunibo.planner.plannerUtil.getDirection()
									}
										CurPos = itunibo.planner.plannerUtil.get_curPos()		
						itunibo.planner.plannerUtil.showMap(  )
						println("WALKER | arrived to the goal $CurPos")
						answer("setGoal", "goalState", "goalState($CurPos)"   )  
						updateResourceRep( "$CurPos"  
						)
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("terminateWalker") { //this:State
					action { //it:State
						println("RBR | terminating Basic Robot...")
						forward("end", "end(0)" ,"basicrobot" ) 
						println("WALKER | terminating...")
						terminate(1)
					}
				}	 
			}
		}
}
